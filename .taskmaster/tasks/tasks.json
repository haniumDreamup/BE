{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Phase 1: 기반 구축 - Spring Boot 백엔드 기본 구조 설정",
        "description": "Spring Boot 3.5.0 기반의 백엔드 프로젝트 기본 구조를 설정하고, 필요한 의존성을 추가하며, 개발 환경을 구성합니다.",
        "details": "- Spring Boot 3.5.0, Java 17 프로젝트 초기화\n- Gradle 빌드 설정 및 의존성 관리\n- 프로젝트 패키지 구조 설계\n- application.yml 프로파일별 설정 (dev, staging, prod)\n- 로깅 설정 (Logback)\n- 기본 예외 처리 구조",
        "testStrategy": "- Spring Boot 애플리케이션 정상 구동 확인\n- 프로파일별 설정 로드 테스트\n- 로깅 레벨별 출력 테스트",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Phase 1: 기반 구축 - 데이터베이스 스키마 설계 및 구현",
        "description": "BIF 사용자를 위한 데이터베이스 스키마를 설계하고 JPA 엔티티를 구현합니다.",
        "details": "- MySQL 8.0 데이터베이스 설정\n- Flyway 마이그레이션 설정\n- User, Guardian 엔티티 구현\n- Device, Location 엔티티 구현\n- Reminder, Schedule 엔티티 구현\n- Medication, Activity 엔티티 구현\n- JPA Repository 인터페이스 작성",
        "testStrategy": "- 엔티티 매핑 검증 테스트\n- Repository CRUD 작업 테스트\n- 데이터베이스 연결 테스트\n- Flyway 마이그레이션 테스트",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Phase 1: 기반 구축 - 인증/인가 시스템 구축",
        "description": "Spring Security와 JWT를 활용한 인증 시스템을 구현하고, BIF 사용자와 보호자를 위한 권한 관리 체계를 구축합니다.",
        "details": "- Spring Security 설정\n- JWT 토큰 생성 및 검증 구현\n- 사용자 인증 서비스 구현\n- 보호자 권한 관리 시스템\n- Redis 기반 토큰 관리\n- 비밀번호 암호화 구현\n- 이메일 인증 프로세스\n<info added on 2025-07-22T07:31:30.063Z>\n**[2025-01-22] RBAC (Role-Based Access Control) 구현 완료**\n\n완료된 작업:\n- UserController: 일반 사용자 전용 엔드포인트 (/api/users)\n- GuardianController: 보호자 전용 엔드포인트 (/api/guardians)\n- AdminController: 관리자 전용 엔드포인트 (/api/admin)\n- @PreAuthorize 어노테이션을 통한 메소드 레벨 권한 제어 구현\n  - hasRole('USER'), hasRole('GUARDIAN'), hasRole('ADMIN')\n- UserService: 사용자 프로필 관리, 설정 업데이트\n- GuardianService: 보호자-사용자 관계 관리, 사용자 활동 조회\n- AdminService: 전체 사용자 관리, 시스템 통계\n- UserProfileDto, UserSettingsDto, GuardianRelationshipDto 등 DTO 구현\n- UserRepository, GuardianRepository 커스텀 쿼리 메소드 추가\n- 전체 테스트 커버리지: 136/136 테스트 통과 (100%)\n\n남은 작업:\n- 이메일 인증 시스템 구현\n- 비밀번호 재설정 기능\n- 2단계 인증 (2FA)\n- 계정 잠금 및 보안 정책\n- 로그인 시도 제한\n</info added on 2025-07-22T07:31:30.063Z>",
        "testStrategy": "- JWT 토큰 생성/검증 테스트\n- 인증 필터 동작 테스트\n- 권한별 접근 제어 테스트\n- Redis 토큰 저장/조회 테스트",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Phase 1: 기반 구축 - 기본 API 엔드포인트 개발",
        "description": "BIF 사용자와 보호자를 위한 기본 REST API 엔드포인트를 개발하고, 5학년 수준의 쉬운 응답 메시지를 구현합니다.",
        "details": "- 사용자 관리 API (회원가입, 로그인, 프로필)\n- 보호자 관리 API (등록, 권한 설정)\n- 디바이스 관리 API (등록, 페어링)\n- 건강 체크 API\n- 표준 응답 포맷 구현\n- 에러 메시지 간소화 (5학년 수준)\n- API 문서화 (Swagger)",
        "testStrategy": "- 각 엔드포인트 통합 테스트\n- 응답 메시지 가독성 검증\n- 에러 처리 테스트\n- API 문서 자동 생성 확인",
        "status": "done",
        "dependencies": [
          2,
          3
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Phase 2: AI 통합 - OpenAI API 연동",
        "description": "OpenAI API를 연동하여 BIF 사용자를 위한 상황 인식 및 맥락 이해 기능을 구현합니다.",
        "details": "- OpenAI API 클라이언트 구현\n- 프롬프트 엔지니어링 (BIF 사용자 최적화)\n- 상황 분석 서비스 구현\n- 응답 간소화 처리 (5학년 수준)\n- API 사용량 모니터링\n- 에러 처리 및 폴백 메커니즘\n- 캐싱 전략 구현",
        "testStrategy": "- API 연동 테스트\n- 프롬프트 응답 품질 검증\n- 응답 시간 측정 (<3초)\n- 에러 상황 처리 테스트",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Phase 2: AI 통합 - YOLOv8 객체 인식 통합",
        "description": "Google Vertex AI Vision API를 활용하여 이미지 분석 기능을 구현하고, BIF 사용자의 일상 활동을 위한 맞춤형 시각 지원을 제공합니다.",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "high",
        "details": "- Google Cloud 프로젝트 설정 및 Vertex AI API 활성화\n- Vertex AI Vision 클라이언트 라이브러리 통합\n- 이미지 업로드 및 전처리 파이프라인\n- 멀티모달 분석 요청 처리 (객체 인식, 장면 이해, 텍스트 추출)\n- BIF 사용자 맞춤 프롬프트 설계 (5학년 수준 설명)\n- 위험 요소 및 일상 물건 분류 시스템\n- 분석 결과 캐싱 및 응답 최적화\n- API 사용량 모니터링 및 비용 관리",
        "testStrategy": "- Vertex AI API 연동 테스트\n- 이미지 분석 정확도 검증\n- 응답 시간 측정 (<3초 목표)\n- 다양한 환경 및 조명 조건 테스트\n- API 할당량 및 에러 처리 테스트\n- BIF 맞춤 설명 품질 검증",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Phase 2: AI 통합 - MediaPipe Pose 낙상 감지 구현",
        "description": "MediaPipe Pose를 활용하여 실시간 자세 추정 및 낙상 감지 시스템을 구현합니다.",
        "details": "- MediaPipe Pose 모델 통합\n- 실시간 자세 추정 파이프라인\n- 낙상 감지 알고리즘 구현\n- 긴급 상황 판단 로직\n- 자동 알림 시스템 연동\n- 오탐지 방지 메커니즘\n- 자세 데이터 저장 및 분석",
        "testStrategy": "- 낙상 감지 정확도 테스트\n- 실시간 처리 성능 검증\n- 다양한 자세 시나리오 테스트\n- 긴급 알림 전송 테스트",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Pose 데이터 수신 API 엔드포인트 구현",
            "description": "클라이언트에서 전송되는 MediaPipe Pose 데이터를 수신하고 검증하는 REST API 엔드포인트를 구현합니다.",
            "dependencies": [],
            "details": "- POST /api/v1/pose/data 엔드포인트 생성\n- PoseDataDto 및 JointPositionDto 정의 (33개 랜드마크)\n- 입력 데이터 검증 (@Valid, 좌표 범위 체크)\n- 타임스탬프 및 사용자 ID 처리\n- WebSocket 실시간 스트리밍 옵션 구현\n- Rate limiting 적용 (초당 30프레임 제한)",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Pose 데이터 저장 및 관리 시스템",
            "description": "수신된 pose 데이터를 효율적으로 저장하고 관리하는 데이터 모델과 리포지토리를 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "- PoseData 엔티티 설계 (userId, timestamp, landmarks)\n- PoseSession 엔티티로 세션 관리\n- Time-series 데이터 최적화 (파티셔닝 고려)\n- Redis 캐싱으로 실시간 데이터 버퍼링\n- 이전 5초간 데이터 sliding window 유지\n- 주기적 데이터 압축 및 아카이빙",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "낙상 감지 알고리즘 서비스 구현",
            "description": "MediaPipe Pose 데이터를 분석하여 낙상을 실시간으로 감지하는 핵심 알고리즘을 구현합니다.",
            "dependencies": [
              1,
              2
            ],
            "details": "- FallDetectionService 구현\n- 주요 관절 각도 계산 (엉덩이, 무릎, 어깨)\n- 신체 중심점 급격한 하강 감지 (속도/가속도)\n- 바닥과의 거리 추정 알고리즘\n- 누운 자세 판별 (수평 정렬 체크)\n- 움직임 없음 감지 (3초 이상)\n- 신뢰도 점수 계산 (0-100%)",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "낙상 이벤트 처리 및 긴급 알림 시스템",
            "description": "낙상 감지 시 긴급 상황을 판단하고 보호자에게 즉시 알림을 전송하는 시스템을 구현합니다.",
            "dependencies": [
              3
            ],
            "details": "- FallEventProcessor 구현\n- 낙상 심각도 레벨 판정 (경미/중간/심각)\n- 보호자 알림 우선순위 큐 관리\n- SMS/Push/전화 다중 채널 알림\n- 위치 정보 자동 포함\n- 알림 전송 실패 시 재시도 로직\n- 5초 내 응답 없을 시 119 자동 연결 준비",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "오탐지 방지 및 모니터링 시스템",
            "description": "낙상 감지의 정확도를 높이고 오탐지를 줄이기 위한 검증 시스템과 모니터링을 구현합니다.",
            "dependencies": [
              3,
              4
            ],
            "details": "- 이전 동작 패턴 학습 (ML 모델)\n- 일상 활동 vs 낙상 구분 로직\n- 사용자별 움직임 프로파일 생성\n- 오탐지 피드백 수집 API\n- 실시간 감지 정확도 대시보드\n- CloudWatch 메트릭 연동\n- 주간/월간 감지 리포트 생성",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Phase 2: AI 통합 - 상황 분석 알고리즘 개발",
        "description": "AI 모델들의 결과를 종합하여 BIF 사용자를 위한 맞춤형 상황 분석 및 행동 제안 알고리즘을 개발합니다.",
        "details": "- 멀티모달 데이터 통합 (이미지, 텍스트, 위치)\n- 상황 컨텍스트 분석 엔진\n- BIF 사용자 맞춤 의사결정 트리\n- 위험도 평가 시스템\n- 행동 제안 생성기\n- 학습 기반 개인화\n- 실시간 피드백 처리",
        "testStrategy": "- 상황 분석 정확도 테스트\n- 제안 적절성 평가\n- 응답 시간 벤치마크\n- 사용자 시나리오 테스트",
        "status": "done",
        "dependencies": [
          5,
          6,
          7
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "낙상 감지 알고리즘 및 센서 융합 시스템",
            "description": "MediaPipe Pose 데이터와 가속도계/자이로스코프 센서 데이터를 융합하여 정확한 낙상 감지 알고리즘을 구현합니다.",
            "dependencies": [],
            "details": "- MediaPipe Pose 자세 데이터 실시간 분석\n- 가속도계/자이로스코프 센서 데이터 수집 및 처리\n- 센서 융합 알고리즘 구현 (칼만 필터 적용)\n- 낙상 패턴 학습 모델 구축\n- 오탐지 최소화를 위한 다중 검증 로직\n- 낙상 이벤트 로깅 및 분석 시스템",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "긴급 응답 및 알림 시스템",
            "description": "낙상 및 위험 상황 감지 시 즉각적인 응답과 다단계 알림 체계를 구축합니다.",
            "dependencies": [
              1
            ],
            "details": "- 긴급 상황 우선순위 분류 시스템\n- 다단계 알림 전송 로직 (SMS, Push, 전화)\n- 보호자/의료진 연락망 관리\n- 응답 시간 모니터링 및 최적화\n- 자동 에스컬레이션 프로세스\n- 알림 전송 실패 시 폴백 메커니즘",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "지오펜싱 및 위치 모니터링",
            "description": "GPS 기반 안전 구역 설정 및 실시간 위치 추적 시스템을 구현합니다.",
            "dependencies": [],
            "details": "- 안전 구역 경계 설정 및 관리 API\n- 실시간 GPS 위치 추적 서비스\n- 구역 이탈 감지 알고리즘\n- 위치 히스토리 저장 및 분석\n- 배터리 효율적인 위치 추적 전략\n- 실내 위치 추적 보완 시스템",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "배회 감지 및 내비게이션 지원",
            "description": "비정상적인 이동 패턴을 감지하고 안전한 귀가를 돕는 내비게이션 시스템을 개발합니다.",
            "dependencies": [
              3
            ],
            "details": "- 이동 패턴 학습 및 이상 감지 ML 모델\n- 배회 행동 식별 알고리즘\n- 안전 경로 계산 및 제공\n- 음성 기반 길 안내 시스템\n- 랜드마크 기반 위치 확인\n- 보호자 원격 위치 확인 기능",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "SOS 기능 및 긴급 녹음 시스템",
            "description": "원터치 SOS 기능과 긴급 상황 자동 녹음/녹화 시스템을 구현합니다.",
            "dependencies": [
              2
            ],
            "details": "- 원터치 SOS 버튼 처리 로직\n- 자동 음성/영상 녹화 트리거\n- 긴급 상황 데이터 암호화 저장\n- 실시간 스트리밍 기능\n- 위치 정보 포함 긴급 메시지 생성\n- 녹음/녹화 데이터 자동 백업",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "긴급 연락처 관리 시스템",
            "description": "긴급 상황 시 연락할 보호자 및 의료진 정보를 체계적으로 관리합니다.",
            "dependencies": [],
            "details": "- 연락처 우선순위 관리 시스템\n- 연락처별 권한 설정 기능\n- 의료 정보 연동 (알레르기, 복용약물)\n- 연락처 가용성 실시간 확인\n- 긴급 연락 이력 관리\n- 연락처 정보 암호화 및 보안",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Phase 3: 실시간 처리 - WebSocket 실시간 통신 구현",
        "description": "WebSocket을 사용하여 실시간 양방향 통신 시스템을 구현하고, BIF 사용자와 보호자 간의 즉각적인 정보 공유를 지원합니다.",
        "details": "- Spring WebSocket 설정\n- STOMP 프로토콜 구현\n- 실시간 위치 공유 채널\n- 긴급 알림 채널\n- 활동 상태 브로드캐스트\n- 연결 상태 관리\n- 재연결 메커니즘",
        "testStrategy": "- WebSocket 연결 테스트\n- 메시지 전송/수신 검증\n- 대용량 동시 접속 테스트\n- 연결 복구 테스트",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "WebSocket과 STOMP 프로토콜 기본 설정 구현",
            "description": "Spring Boot에서 WebSocket과 STOMP 메시징 프로토콜을 설정하고 기본적인 메시지 브로커를 구성합니다.",
            "dependencies": [],
            "details": "- spring-boot-starter-websocket 의존성 추가\n- WebSocketConfig 클래스 생성 및 @EnableWebSocketMessageBroker 설정\n- STOMP 엔드포인트 구성 (/ws-bif)\n- 메시지 브로커 설정 (SimpleBroker 또는 RabbitMQ)\n- SockJS 폴백 옵션 설정\n- CORS 설정 및 허용된 origin 구성\n- WebSocket 핸드셰이크 인터셉터 구현",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "실시간 위치 공유 채널 구현",
            "description": "BIF 사용자의 실시간 위치 정보를 보호자에게 전송하는 WebSocket 채널을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "- LocationWebSocketController 생성\n- /topic/location/{userId} 구독 채널 설정\n- LocationUpdateDTO (latitude, longitude, timestamp, accuracy) 정의\n- @MessageMapping으로 위치 업데이트 핸들러 구현\n- 위치 업데이트 빈도 제한 (throttling) 로직\n- 보호자 권한 검증 로직\n- 위치 데이터 암호화 전송",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "긴급 알림 채널 및 우선순위 처리 구현",
            "description": "긴급 상황 발생 시 즉각적인 알림을 전송하는 고우선순위 WebSocket 채널을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "- EmergencyWebSocketController 생성\n- /topic/emergency/{guardianId} 채널 설정\n- EmergencyAlertDTO (alertType, severity, userId, location, message) 정의\n- 우선순위 큐를 사용한 메시지 처리\n- 알림 수신 확인 메커니즘 구현\n- 실패 시 재전송 로직 (최대 3회)\n- 긴급 상황 로그 기록",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "활동 상태 브로드캐스트 시스템 구현",
            "description": "BIF 사용자의 실시간 활동 상태(배터리, 연결 상태, 현재 활동)를 브로드캐스트하는 시스템을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "- ActivityStatusWebSocketController 생성\n- /topic/status/{userId} 브로드캐스트 채널\n- ActivityStatusDTO (batteryLevel, connectivity, currentActivity, lastSeen) 정의\n- 주기적 상태 업데이트 스케줄러 (30초 간격)\n- 상태 변경 감지 및 즉시 알림\n- 오프라인 감지 로직 (5분 이상 미연결)\n- Redis를 통한 상태 캐싱",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "WebSocket 연결 상태 관리 및 세션 처리 구현",
            "description": "WebSocket 연결의 생명주기를 관리하고 사용자 세션을 추적하는 시스템을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "- WebSocketSessionManager 서비스 구현\n- 연결/해제 이벤트 리스너 구현\n- 사용자별 활성 세션 추적 (ConcurrentHashMap)\n- 다중 디바이스 연결 지원\n- 세션 타임아웃 처리 (30분)\n- 연결 상태 모니터링 대시보드 데이터\n- 동시 접속자 수 제한 로직",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "자동 재연결 메커니즘 및 메시지 복구 구현",
            "description": "네트워크 불안정 상황에서 자동으로 재연결하고 손실된 메시지를 복구하는 메커니즘을 구현합니다.",
            "dependencies": [
              1,
              5
            ],
            "details": "- 클라이언트 재연결 전략 구현 (exponential backoff)\n- 서버 측 메시지 큐잉 시스템\n- 오프라인 메시지 저장 (Redis, TTL 24시간)\n- 재연결 시 미전송 메시지 동기화\n- 연결 품질 모니터링 (latency, packet loss)\n- 자동 폴백 메커니즘 (WebSocket → Long Polling)\n- 재연결 성공률 메트릭 수집",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Phase 3: 실시간 처리 - 비디오 스트리밍 파이프라인 구축",
        "description": "웨어러블 카메라에서 주기적으로 캡처한 이미지를 AI로 분석하여 사용자에게 상황을 설명하는 시스템을 구축합니다.",
        "status": "done",
        "dependencies": [
          9
        ],
        "priority": "high",
        "details": "- 이미지 캡처 API 엔드포인트 구축\n- 이미지 업로드 및 저장 처리 (S3)\n- YOLOv8 객체 인식 통합\n- OCR 텍스트 추출 서비스 구현\n- OpenAI를 통한 통합 상황 해석\n- 이미지 분석 큐 시스템\n- 배치 처리 최적화\n- 분석 결과 캐싱",
        "testStrategy": "- 이미지 업로드 처리 시간 측정\n- AI 분석 정확도 테스트\n- 다양한 상황 시나리오 테스트\n- 응답 시간 검증 (<3초)\n- 동시 요청 처리 테스트",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Phase 3: 실시간 처리 - 엣지 컴퓨팅 로직 구현",
        "description": "민감한 데이터 보호를 위한 암호화 및 보안 처리 시스템을 구현하여 사용자 프라이버시를 보호합니다.",
        "status": "done",
        "dependencies": [
          10
        ],
        "priority": "high",
        "details": "- AES 암호화 구현 (위치 정보, 건강 정보, 개인 식별 정보)\n- 암호화/복호화 유틸리티 클래스 구현\n- HTTPS 통신 설정 강화\n- JWT 토큰 보안 강화 (리프레시 토큰, 토큰 만료 관리)\n- 민감 데이터 필드 암호화 어노테이션 구현\n- 데이터베이스 암호화 컬럼 설정\n- API 요청/응답 암호화 처리",
        "testStrategy": "- AES 암호화/복호화 정확성 테스트\n- HTTPS 통신 보안 검증\n- JWT 토큰 보안 테스트\n- 민감 데이터 암호화 확인 테스트\n- 성능 영향도 테스트",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Phase 3: 실시간 처리 - 응답 시간 최적화",
        "description": "전체 시스템의 응답 시간을 3초 이내로 최적화하여 BIF 사용자에게 즉각적인 지원을 제공합니다.",
        "status": "done",
        "dependencies": [
          8,
          9,
          10,
          11
        ],
        "priority": "high",
        "details": "- 데이터베이스 쿼리 최적화 (N+1 문제 해결, Fetch Join)\n- JPA 엔티티 매핑 최적화\n- 인덱스 설계 및 적용\n- 쿼리 성능 분석 및 개선\n- 배치 처리 최적화\n- 읽기 전용 트랜잭션 분리",
        "testStrategy": "- JPA 쿼리 성능 측정\n- N+1 문제 해결 검증\n- 인덱스 적용 전후 비교\n- 대용량 데이터 조회 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "N+1 문제 해결",
            "description": "JPA 엔티티 연관관계에서 발생하는 N+1 문제를 Fetch Join과 EntityGraph를 활용하여 해결합니다.",
            "status": "done",
            "dependencies": [],
            "details": "- 엔티티 연관관계 분석 및 N+1 발생 지점 파악\n- @ManyToOne, @OneToMany 관계 최적화\n- JPQL Fetch Join 쿼리 작성\n- @EntityGraph 어노테이션 적용\n- Lazy Loading 전략 검토 및 조정\n- 배치 사이즈 설정 최적화",
            "testStrategy": "- 쿼리 실행 횟수 측정\n- Hibernate 통계 로그 분석\n- 성능 개선 전후 비교 테스트"
          },
          {
            "id": 2,
            "title": "복합 인덱스 설계 및 적용",
            "description": "자주 사용되는 쿼리 패턴을 분석하여 효율적인 인덱스를 설계하고 적용합니다.",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "- 쿼리 로그 분석으로 자주 사용되는 검색 조건 파악\n- 복합 인덱스 카디널리티 분석\n- @Index 어노테이션으로 인덱스 정의\n- WHERE, ORDER BY, GROUP BY 절 최적화\n- 인덱스 힌트 사용 검토\n- 불필요한 인덱스 제거",
            "testStrategy": "- EXPLAIN 분석으로 인덱스 사용 확인\n- 인덱스 적용 전후 쿼리 시간 비교\n- 인덱스 효율성 검증"
          },
          {
            "id": 3,
            "title": "JPA 쿼리 최적화",
            "description": "복잡한 쿼리를 QueryDSL 또는 네이티브 쿼리로 최적화하고, 프로젝션을 활용하여 필요한 데이터만 조회합니다.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "- 복잡한 조인 쿼리 최적화\n- DTO 프로젝션 활용으로 불필요한 컬럼 조회 제거\n- @Query 어노테이션으로 JPQL 최적화\n- 읽기 전용 트랜잭션 @Transactional(readOnly=true) 적용\n- 페이징 쿼리 최적화\n- 카운트 쿼리 분리",
            "testStrategy": "- 쿼리 실행 시간 측정\n- 메모리 사용량 비교\n- 프로젝션 적용 효과 검증"
          },
          {
            "id": 4,
            "title": "배치 처리 및 벌크 연산 구현",
            "description": "대량 데이터 처리를 위한 배치 처리를 구현하고, 벌크 INSERT/UPDATE를 최적화합니다.",
            "status": "done",
            "dependencies": [
              3
            ],
            "details": "- hibernate.jdbc.batch_size 설정\n- JPA saveAll() 최적화\n- 벌크 UPDATE/DELETE 쿼리 작성\n- @Modifying 어노테이션 활용\n- 청크 단위 처리 구현\n- 트랜잭션 범위 최적화",
            "testStrategy": "- 배치 처리 성능 측정\n- 단건 처리 vs 배치 처리 비교\n- 메모리 사용량 모니터링"
          },
          {
            "id": 5,
            "title": "Slow Query 분석 및 개선",
            "description": "느린 쿼리를 식별하고 분석하여 성능을 개선합니다.",
            "status": "done",
            "dependencies": [
              4
            ],
            "details": "- Hibernate 통계 로깅 활성화\n- 3초 이상 소요되는 쿼리 식별\n- 쿼리 실행 계획 분석\n- 커넥션 풀 사이즈 튜닝\n- 트랜잭션 타임아웃 설정\n- 데이터베이스 힌트 적용",
            "testStrategy": "- Slow Query 로그 분석\n- 개선된 쿼리 성능 검증\n- 전체 API 응답 시간 측정"
          }
        ]
      },
      {
        "id": 13,
        "title": "Phase 4: 사용자 경험 - 모바일 앱 백엔드 API 개발",
        "description": "React Native 모바일 앱을 위한 백엔드 API를 개발하고, BIF 사용자에게 최적화된 인터페이스를 제공합니다.",
        "details": "- 모바일 특화 API 설계\n- 푸시 알림 서비스 구현\n- 오프라인 동기화 API\n- 이미지/비디오 업로드 API\n- 배터리 절약 모드 지원\n- 모바일 세션 관리\n- API 버전 관리",
        "testStrategy": "- 모바일 네트워크 환경 테스트\n- 푸시 알림 전송 테스트\n- 오프라인 동기화 검증\n- API 버전 호환성 테스트",
        "status": "done",
        "dependencies": [
          12
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "모바일 특화 REST API 설계 및 기본 구조 구현",
            "description": "React Native 앱을 위한 모바일 최적화 API 엔드포인트를 설계하고, 기본 컨트롤러와 서비스 구조를 구현합니다.",
            "dependencies": [],
            "details": "- MobileApiController 기본 구조 생성\n- 모바일 전용 응답 DTO 설계 (간소화된 페이로드)\n- API 버전 관리 시스템 구현 (/api/v1/mobile)\n- 모바일 특화 인증 필터 구현 (JWT + Device ID)\n- 압축 응답 지원 (gzip)\n- 페이지네이션 최적화 (무한 스크롤 지원)\n- 필드 선택 기능 구현 (GraphQL-like field selection)",
            "status": "done",
            "testStrategy": "- API 응답 크기 측정 테스트\n- 압축률 검증\n- 버전별 호환성 테스트\n- 모바일 인증 플로우 테스트"
          },
          {
            "id": 2,
            "title": "FCM 기반 푸시 알림 서비스 구현",
            "description": "Firebase Cloud Messaging을 활용하여 약물 알림, 일정 알림, 긴급 알림 등의 푸시 알림 시스템을 구축합니다.",
            "dependencies": [
              1
            ],
            "details": "- FCM SDK 통합 및 설정\n- NotificationService 구현 (알림 타입별 처리)\n- 디바이스 토큰 관리 시스템\n- 알림 우선순위 및 카테고리 설정\n- 알림 히스토리 저장 및 조회 API\n- 알림 설정 관리 API (사용자별 on/off)\n- 배치 알림 발송 기능\n- 알림 템플릿 관리 (간단한 한국어 메시지)",
            "status": "done",
            "testStrategy": "- FCM 토큰 등록/갱신 테스트\n- 알림 발송 성공률 측정\n- 다양한 알림 타입 테스트\n- 대량 발송 성능 테스트"
          },
          {
            "id": 3,
            "title": "오프라인 동기화 API 및 충돌 해결 메커니즘 구현",
            "description": "네트워크가 불안정한 환경에서도 앱이 정상 작동할 수 있도록 오프라인 데이터 동기화 시스템을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "- SyncController 및 SyncService 구현\n- 클라이언트 타임스탬프 기반 변경 추적\n- 동기화 큐 관리 시스템 (Redis 활용)\n- 충돌 해결 전략 구현 (Last Write Wins + 사용자 확인)\n- 증분 동기화 API (변경된 데이터만 전송)\n- 동기화 상태 추적 API\n- 데이터 버전 관리 시스템\n- 압축 및 배치 동기화 지원",
            "status": "done",
            "testStrategy": "- 오프라인 시나리오 시뮬레이션\n- 동시 수정 충돌 테스트\n- 대용량 데이터 동기화 테스트\n- 네트워크 재연결 시 동기화 테스트"
          },
          {
            "id": 4,
            "title": "이미지/비디오 업로드 API 및 미디어 처리 서비스 구현",
            "description": "사용자가 촬영한 이미지와 비디오를 효율적으로 업로드하고 처리할 수 있는 미디어 관리 시스템을 구축합니다.",
            "dependencies": [
              1
            ],
            "details": "- MediaUploadController 구현 (멀티파트 업로드)\n- S3 직접 업로드를 위한 Presigned URL 생성 API\n- 이미지 리사이징 서비스 (썸네일 자동 생성)\n- 비디오 압축 및 변환 서비스\n- 업로드 진행률 추적 API\n- 청크 업로드 지원 (대용량 파일)\n- 미디어 메타데이터 관리\n- CDN 연동 및 최적화된 URL 제공",
            "status": "done",
            "testStrategy": "- 대용량 파일 업로드 테스트\n- 동시 업로드 성능 테스트\n- 네트워크 중단 시 재개 테스트\n- 다양한 미디어 포맷 호환성 테스트"
          },
          {
            "id": 5,
            "title": "배터리 절약 모드 및 모바일 세션 관리 시스템 구현",
            "description": "모바일 환경의 제약사항을 고려한 배터리 최적화 기능과 효율적인 세션 관리 시스템을 구현합니다.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "- PowerSavingController 구현 (배터리 모드별 API 동작 조정)\n- 적응형 동기화 주기 관리 (배터리 레벨에 따른 조정)\n- API 호출 배칭 시스템 (여러 요청을 하나로 묶기)\n- 백그라운드 작업 스케줄링 API\n- 모바일 세션 연장 메커니즘 (자동 갱신)\n- 디바이스별 세션 관리 및 동시 접속 제어\n- 데이터 사용량 추적 API\n- 저전력 모드 시 핵심 기능만 제공하는 Lite API",
            "status": "done",
            "testStrategy": "- 배터리 소모량 측정 테스트\n- 세션 만료 및 갱신 테스트\n- API 배칭 효율성 테스트\n- 다중 디바이스 세션 관리 테스트"
          }
        ]
      },
      {
        "id": 14,
        "title": "Phase 4: 사용자 경험 - BIF 사용자 테스트 지원 시스템",
        "description": "BIF 사용자의 특성을 고려한 테스트 데이터 수집 및 분석 시스템을 구축합니다.",
        "details": "- 사용자 행동 로깅 시스템\n- 인터랙션 패턴 분석\n- A/B 테스트 프레임워크\n- 사용성 메트릭 수집\n- 피드백 수집 API\n- 테스트 그룹 관리\n- 익명화된 데이터 저장",
        "testStrategy": "- 로깅 시스템 정확성 검증\n- 데이터 익명화 테스트\n- 메트릭 수집 성능 테스트\n- A/B 테스트 로직 검증",
        "status": "done",
        "dependencies": [
          13
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "사용자 행동 로깅 인프라 구축",
            "description": "BIF 사용자의 모든 인터랙션을 효율적으로 수집하고 저장하는 로깅 시스템을 구축합니다.",
            "dependencies": [],
            "details": "- UserBehaviorLog 엔티티 설계 (userId, sessionId, actionType, actionDetail, timestamp, deviceInfo)\n- 비동기 로깅 서비스 구현 (@Async, CompletableFuture 활용)\n- Kafka 또는 Redis Streams 기반 이벤트 스트리밍 설정\n- 로그 데이터 파티셔닝 전략 구현 (일별/월별)\n- 민감 정보 마스킹 처리\n- 로그 레벨 설정 (DEBUG, INFO, WARN, ERROR)",
            "status": "done",
            "testStrategy": "- 동시성 테스트 (1000+ 동시 로그 요청)\n- 로그 유실 방지 테스트\n- 성능 벤치마크 (응답시간 < 10ms)"
          },
          {
            "id": 2,
            "title": "인터랙션 패턴 분석 엔진 개발",
            "description": "수집된 로그 데이터를 기반으로 사용자의 행동 패턴을 분석하는 시스템을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "- InteractionPattern 엔티티 및 분석 결과 저장 구조 설계\n- 패턴 분석 알고리즘 구현 (클릭 빈도, 체류 시간, 네비게이션 경로)\n- Spring Batch를 활용한 배치 분석 작업 구현\n- 실시간 분석을 위한 Redis 기반 집계 시스템\n- 이상 패턴 감지 로직 (평균 대비 3σ 이상)\n- 분석 결과 캐싱 전략",
            "status": "done",
            "testStrategy": "- 패턴 인식 정확도 테스트\n- 배치 작업 성능 테스트\n- 실시간 집계 정확성 검증"
          },
          {
            "id": 3,
            "title": "A/B 테스트 프레임워크 구현",
            "description": "BIF 사용자를 위한 A/B 테스트 실험을 관리하고 실행하는 프레임워크를 개발합니다.",
            "dependencies": [],
            "details": "- Experiment, TestGroup, TestVariant 엔티티 설계\n- 사용자 그룹 할당 알고리즘 구현 (해시 기반 균등 분배)\n- Feature Flag 시스템 통합\n- 실험 설정 관리 API (시작/종료 날짜, 대상 사용자 조건)\n- 변형(Variant) 별 설정 값 관리\n- 실험 상태 추적 (DRAFT, ACTIVE, PAUSED, COMPLETED)",
            "status": "done",
            "testStrategy": "- 그룹 할당 균등성 테스트\n- Feature Flag 동작 검증\n- 실험 전환 시나리오 테스트"
          },
          {
            "id": 4,
            "title": "사용성 메트릭 수집 시스템",
            "description": "BIF 사용자의 앱 사용성을 측정하는 핵심 메트릭을 정의하고 수집하는 시스템을 구축합니다.",
            "dependencies": [
              1,
              2
            ],
            "details": "- UsabilityMetric 엔티티 설계 (taskCompletionRate, errorRate, timeOnTask)\n- 메트릭 계산 서비스 구현 (성공률, 오류율, 작업 소요 시간)\n- 실시간 대시보드용 WebSocket 엔드포인트\n- 일간/주간/월간 집계 배치 작업\n- 사용자 그룹별 메트릭 비교 기능\n- 임계값 기반 알림 시스템",
            "status": "done",
            "testStrategy": "- 메트릭 계산 정확성 검증\n- 실시간 업데이트 테스트\n- 집계 데이터 일관성 테스트"
          },
          {
            "id": 5,
            "title": "피드백 수집 API 개발",
            "description": "BIF 사용자와 보호자로부터 구조화된 피드백을 수집하는 RESTful API를 구현합니다.",
            "dependencies": [],
            "details": "- UserFeedback 엔티티 설계 (rating, category, comment, attachments)\n- 피드백 제출 API (/api/feedback/submit)\n- 음성 피드백 지원 (음성->텍스트 변환 통합)\n- 이미지 첨부 기능 (S3 업로드)\n- 감정 분석 서비스 연동 (긍정/부정/중립)\n- 피드백 카테고리 자동 분류\n- 익명 피드백 옵션",
            "status": "done",
            "testStrategy": "- API 응답 시간 테스트\n- 파일 업로드 제한 테스트\n- 감정 분석 정확도 검증"
          },
          {
            "id": 6,
            "title": "테스트 그룹 관리 시스템",
            "description": "A/B 테스트 참여자 그룹을 효율적으로 관리하고 모니터링하는 시스템을 구축합니다.",
            "dependencies": [
              3
            ],
            "details": "- TestGroupManager 서비스 구현\n- 사용자 세그먼트 정의 (연령대, 사용 빈도, 가입일 등)\n- 동적 그룹 할당/재할당 기능\n- 그룹별 사용자 통계 실시간 모니터링\n- 테스트 그룹 이력 관리\n- 그룹 간 교차 오염 방지 로직\n- 관리자용 그룹 관리 API",
            "status": "done",
            "testStrategy": "- 그룹 할당 로직 테스트\n- 세그먼트 필터링 검증\n- 동시성 제어 테스트"
          },
          {
            "id": 7,
            "title": "데이터 익명화 및 보안 처리",
            "description": "수집된 모든 테스트 데이터를 GDPR 규정에 맞게 익명화하고 안전하게 저장하는 시스템을 구현합니다.",
            "dependencies": [
              1,
              2,
              4,
              5
            ],
            "details": "- 데이터 익명화 서비스 구현 (PII 마스킹, 해싱)\n- 익명화 규칙 엔진 (이름, 주소, 전화번호 등)\n- 데이터 보존 정책 구현 (90일 후 자동 삭제)\n- 암호화 저장 (AES-256)\n- 익명화된 데이터 내보내기 API\n- 감사 로그 시스템 (누가, 언제, 무엇을 접근)\n- GDPR 준수 보고서 생성 기능",
            "status": "done",
            "testStrategy": "- 익명화 완전성 테스트\n- 복호화 불가능성 검증\n- 데이터 보존 정책 테스트"
          }
        ]
      },
      {
        "id": 15,
        "title": "Phase 4: 사용자 경험 - 접근성 기능 강화",
        "description": "WCAG 2.1 AA 준수를 위한 백엔드 접근성 기능을 구현하고, BIF 사용자를 위한 추가 지원 기능을 개발합니다.",
        "details": "- 음성 안내 텍스트 생성 API\n- 고대비 모드 데이터 지원\n- 큰 글씨 모드 설정 저장\n- 간소화된 네비게이션 데이터\n- 터치 영역 최적화 정보\n- 다국어 간단 문장 지원\n- 접근성 설정 동기화",
        "testStrategy": "- WCAG 2.1 AA 준수 검증\n- 스크린 리더 호환성 테스트\n- 다양한 접근성 설정 테스트\n- 성능 영향 측정",
        "status": "done",
        "dependencies": [
          13
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "음성 안내 텍스트 생성 API 구현",
            "description": "스크린 리더와 음성 안내를 위한 텍스트 생성 API를 구현합니다. 모든 UI 요소에 대한 적절한 설명 텍스트를 자동으로 생성하고 관리합니다.",
            "dependencies": [],
            "details": "- VoiceGuidanceService 구현: 컨텍스트별 음성 안내 텍스트 생성\n- /api/accessibility/voice-guidance 엔드포인트 개발\n- 텍스트 템플릿 관리 시스템 구축 (다국어 지원)\n- 사용자 레벨에 맞는 간단한 문장 생성 로직\n- Redis 캐싱으로 반복 요청 최적화\n- ARIA 라벨 자동 생성 기능",
            "status": "done",
            "testStrategy": "스크린 리더 호환성 테스트, 다국어 텍스트 생성 검증, 성능 테스트 (응답시간 < 100ms)"
          },
          {
            "id": 2,
            "title": "접근성 설정 관리 시스템 구축",
            "description": "사용자별 접근성 설정을 저장하고 관리하는 시스템을 구현합니다. 고대비 모드, 큰 글씨, 간소화 UI 등의 설정을 포함합니다.",
            "dependencies": [],
            "details": "- AccessibilitySettings 엔티티 설계 및 구현\n- AccessibilitySettingsService 개발\n- /api/users/{userId}/accessibility-settings CRUD API\n- 설정 프로파일 템플릿 기능 (시각장애, 인지장애 등)\n- 디바이스별 설정 동기화 로직\n- 설정 변경 이력 추적",
            "status": "done",
            "testStrategy": "설정 CRUD 테스트, 동기화 로직 검증, 프로파일 적용 테스트"
          },
          {
            "id": 3,
            "title": "고대비 모드 데이터 지원 API",
            "description": "고대비 모드를 위한 색상 스키마 데이터를 제공하는 API를 구현합니다. WCAG 2.1 AA 기준을 충족하는 색상 조합을 관리합니다.",
            "dependencies": [
              2
            ],
            "details": "- ColorSchemeService 구현: WCAG 준수 색상 조합 관리\n- /api/accessibility/color-schemes 엔드포인트\n- 색상 대비 비율 자동 계산 및 검증\n- 사용자 선호 색상 스키마 저장\n- 다크모드/라이트모드별 고대비 옵션\n- 색맹 사용자를 위한 특별 스키마",
            "status": "done",
            "testStrategy": "WCAG 2.1 AA 색상 대비 비율 검증, 색맹 시뮬레이션 테스트"
          },
          {
            "id": 4,
            "title": "간소화된 네비게이션 데이터 시스템",
            "description": "복잡한 메뉴 구조를 단순화하여 제공하는 네비게이션 데이터 시스템을 구현합니다. 최대 2단계 깊이의 메뉴 구조를 유지합니다.",
            "dependencies": [
              2
            ],
            "details": "- SimplifiedNavigationService 개발\n- /api/accessibility/simplified-navigation 엔드포인트\n- 메뉴 아이템 우선순위 알고리즘\n- 사용자 사용 패턴 기반 메뉴 재정렬\n- 아이콘과 텍스트 조합 최적화\n- 브레드크럼 간소화 로직",
            "status": "done",
            "testStrategy": "네비게이션 깊이 검증, 사용성 테스트, 메뉴 로딩 성능 테스트"
          },
          {
            "id": 5,
            "title": "터치 영역 최적화 정보 제공 API",
            "description": "WCAG 2.1 AA 기준에 맞는 터치 타겟 크기 정보를 제공하고, UI 요소의 최적 배치 정보를 관리하는 API를 구현합니다.",
            "dependencies": [
              2
            ],
            "details": "- TouchTargetOptimizationService 구현\n- /api/accessibility/touch-targets 엔드포인트\n- 최소 48dp 터치 영역 검증 로직\n- 요소 간 최적 간격 계산\n- 디바이스별 터치 영역 조정값 제공\n- 실수 방지를 위한 확인 다이얼로그 트리거 정보",
            "status": "done",
            "testStrategy": "터치 영역 크기 검증, 다양한 디바이스 해상도 테스트"
          },
          {
            "id": 6,
            "title": "다국어 간단 문장 변환 시스템",
            "description": "복잡한 문장을 5학년 읽기 수준의 간단한 문장으로 변환하는 시스템을 구현합니다. 한국어를 포함한 다국어를 지원합니다.",
            "dependencies": [
              1
            ],
            "details": "- SimpleLanguageService 구현: OpenAI API 활용\n- /api/accessibility/simplify-text 엔드포인트\n- 문장 복잡도 측정 알고리즘\n- 전문 용어 간단 설명 사전 관리\n- 문장 길이 및 구조 최적화\n- 이모지를 활용한 의미 전달 보조",
            "status": "done",
            "testStrategy": "읽기 수준 측정 테스트, 다국어 변환 정확도 검증, 처리 시간 테스트"
          },
          {
            "id": 7,
            "title": "접근성 설정 디바이스 간 동기화",
            "description": "사용자의 접근성 설정을 모든 디바이스에서 실시간으로 동기화하는 시스템을 구현합니다.",
            "dependencies": [
              2,
              3,
              4,
              5
            ],
            "details": "- AccessibilitySyncService 구현\n- WebSocket 기반 실시간 동기화\n- /api/accessibility/sync 엔드포인트\n- 설정 충돌 해결 알고리즘\n- 오프라인 모드 지원 (로컬 캐싱)\n- 동기화 상태 모니터링 대시보드 데이터",
            "status": "done",
            "testStrategy": "실시간 동기화 테스트, 충돌 해결 시나리오 테스트, 네트워크 장애 복구 테스트"
          }
        ]
      },
      {
        "id": 16,
        "title": "Phase 4: 사용자 경험 - 보호자 대시보드 백엔드 구현",
        "description": "보호자가 BIF 사용자를 효과적으로 지원할 수 있는 모니터링 대시보드를 위한 백엔드 시스템을 구현합니다.",
        "status": "done",
        "dependencies": [
          13
        ],
        "priority": "high",
        "details": "- 기존 데이터 조회 중심의 대시보드 API\n- 오늘의 상태 요약 (복약, 활동, 위치)\n- 일주일 요약 리포트\n- 간단한 알림 설정 관리\n- 권한 기반 데이터 접근\n- 보호자 다중 관리 지원",
        "testStrategy": "- 데이터 조회 API 응답 속도 테스트\n- 권한 검증 테스트\n- 데이터 정확성 검증\n- 다중 보호자 시나리오 테스트",
        "subtasks": [
          {
            "id": 2,
            "title": "오늘의 상태 요약 API 구현",
            "description": "BIF 사용자의 오늘 하루 활동을 간단히 요약하여 보호자에게 제공하는 API를 구현합니다.",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "- DailyStatusSummary 서비스 구현\n- 오늘의 복약 완료율 조회\n- 최근 위치 정보 조회 (마지막 업데이트 시간 포함)\n- 오늘의 활동 시간 요약\n- 완료/미완료 일정 수 집계\n- 간단한 JSON 응답 포맷",
            "testStrategy": "데이터 집계 정확성 테스트, API 응답 시간 측정, 날짜별 데이터 필터링 검증"
          },
          {
            "id": 3,
            "title": "일주일 요약 리포트 API",
            "description": "지난 7일간의 활동 데이터를 요약하여 보호자가 쉽게 이해할 수 있는 형태로 제공합니다.",
            "status": "done",
            "dependencies": [
              2
            ],
            "details": "- WeeklySummary 서비스 구현\n- 일별 복약 순응도 추이\n- 주요 방문 장소 목록 (빈도순)\n- 평균 활동 시간 및 패턴\n- 완료된 일정 비율\n- 간단한 차트 데이터 포맷 제공",
            "testStrategy": "주간 데이터 집계 로직 검증, 빈 데이터 처리 테스트, 성능 최적화 테스트"
          },
          {
            "id": 4,
            "title": "복약 및 일정 현황 조회 API",
            "description": "사용자의 복약 기록과 일정 완료 상태를 조회하는 간단한 API를 구현합니다.",
            "status": "done",
            "dependencies": [
              1
            ],
            "details": "- 오늘/이번주/이번달 복약 기록 조회\n- 복약 시간 및 완료 여부 확인\n- 예정된 일정 목록 조회\n- 일정 완료 상태 업데이트 조회\n- 페이지네이션 지원\n- 날짜 범위 필터링",
            "testStrategy": "날짜 범위 필터링 테스트, 페이지네이션 동작 검증, 데이터 정렬 정확성 테스트"
          },
          {
            "id": 5,
            "title": "간단한 알림 설정 관리",
            "description": "보호자가 주요 이벤트에 대한 알림을 받을 수 있도록 기본적인 알림 설정을 관리합니다.",
            "status": "done",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "- NotificationPreference 엔티티 구현\n- 복약 미완료 알림 설정\n- 위치 업데이트 중단 알림\n- 일정 미완료 알림\n- 알림 켜기/끄기 토글\n- 알림 시간대 설정 (아침/점심/저녁)",
            "testStrategy": "알림 설정 CRUD 테스트, 알림 트리거 조건 검증, 시간대별 알림 테스트"
          },
          {
            "id": 6,
            "title": "대시보드 데이터 통합 조회 API",
            "description": "모든 대시보드 데이터를 한 번의 요청으로 효율적으로 조회할 수 있는 통합 API를 구현합니다.",
            "status": "done",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "- DashboardController 구현\n- 오늘의 상태 + 알림 설정 통합 조회\n- 응답 데이터 최적화 (필요한 필드만 포함)\n- 캐싱 전략 적용 (5분 TTL)\n- 보호자별 데이터 필터링\n- 에러 발생 시 부분 데이터 반환",
            "testStrategy": "통합 API 응답 시간 측정, 캐시 효율성 테스트, 동시 요청 처리 테스트"
          },
          {
            "id": 1,
            "title": "보호자-사용자 관계 관리 시스템 구현",
            "description": "보호자와 BIF 사용자 간의 관계를 정의하고 관리하는 시스템을 구현합니다. 다중 보호자 지원과 권한 레벨 관리를 포함합니다.",
            "dependencies": [],
            "details": "- GuardianRelationship 엔티티 설계 (relationship_type, permission_level, status)\n- 보호자 초대 및 승인 프로세스 구현\n- 관계별 권한 매트릭스 정의 (VIEW_ONLY, MANAGE, EMERGENCY)\n- 보호자 추가/제거/권한 변경 API 구현\n- 관계 상태 관리 (PENDING, ACTIVE, SUSPENDED, REMOVED)",
            "status": "done",
            "testStrategy": "보호자 초대 플로우 테스트, 권한 상속 테스트, 다중 보호자 시나리오 테스트"
          }
        ]
      },
      {
        "id": 17,
        "title": "Phase 5: 안정화 및 배포 - 성능 최적화",
        "description": "전체 시스템의 성능을 최적화하여 100명 이상의 동시 사용자를 지원하고, 안정적인 서비스를 제공합니다.",
        "details": "- 데이터베이스 인덱스 최적화\n- JVM 튜닝 및 메모리 관리\n- 캐시 전략 개선\n- API 응답 압축\n- 이미지/비디오 최적화\n- 쿼리 성능 분석 및 개선\n- 리소스 풀링 최적화",
        "testStrategy": "- 부하 테스트 (JMeter)\n- 스트레스 테스트\n- 메모리 누수 검사\n- 장기 실행 테스트",
        "status": "done",
        "dependencies": [
          16
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "데이터베이스 인덱스 최적화 및 쿼리 성능 개선",
            "description": "데이터베이스 성능 병목 지점을 파악하고 인덱스를 최적화하여 쿼리 응답 시간을 개선합니다.",
            "dependencies": [],
            "details": "- 느린 쿼리 로그 분석 (slow query log 활성화)\n- EXPLAIN ANALYZE를 통한 쿼리 실행 계획 분석\n- 복합 인덱스 생성 (user_id + created_at, location_id + timestamp)\n- N+1 문제 해결을 위한 @EntityGraph 및 fetch join 적용\n- 불필요한 인덱스 제거 및 인덱스 힌트 추가\n- 배치 쿼리 및 벌크 연산 최적화\n- QueryDSL을 활용한 동적 쿼리 최적화",
            "status": "done",
            "testStrategy": "- 쿼리 성능 벤치마크 테스트 (before/after 비교)\n- 인덱스 사용률 모니터링\n- 실행 계획 검증 테스트"
          },
          {
            "id": 2,
            "title": "Redis 기반 다계층 캐싱 전략 구현",
            "description": "Redis를 활용한 효율적인 캐싱 시스템을 구축하여 데이터베이스 부하를 줄이고 응답 속도를 향상시킵니다.",
            "dependencies": [
              1
            ],
            "details": "- Spring Cache와 Redis 통합 설정\n- @Cacheable, @CacheEvict 어노테이션 적용\n- 캐시 TTL 전략 수립 (사용자 프로필: 1시간, 위치 정보: 5분)\n- 캐시 워밍업 스케줄러 구현\n- 캐시 히트율 모니터링 시스템 구축\n- 분산 캐시 일관성 보장 (Redis Pub/Sub)\n- 캐시 스탬피드 방지 로직 구현",
            "status": "done",
            "testStrategy": "- 캐시 히트/미스 비율 측정\n- 동시성 테스트 (캐시 스탬피드 방지 검증)\n- TTL 만료 및 갱신 테스트"
          },
          {
            "id": 3,
            "title": "API 응답 최적화 및 압축 구현",
            "description": "API 응답 크기를 줄이고 네트워크 대역폭을 효율적으로 사용하여 전체적인 응답 속도를 개선합니다.",
            "dependencies": [
              2
            ],
            "details": "- Gzip/Brotli 압축 필터 구현\n- JSON 응답 최적화 (@JsonView로 필드 제어)\n- 페이지네이션 및 커서 기반 페이징 구현\n- GraphQL 부분 도입 검토 (복잡한 조회용)\n- ETag 헤더를 통한 조건부 요청 처리\n- 응답 DTO 최적화 (불필요한 필드 제거)\n- WebFlux를 활용한 비동기 응답 처리",
            "status": "done",
            "testStrategy": "- 응답 크기 측정 및 압축률 검증\n- 네트워크 대역폭 사용량 모니터링\n- 다양한 클라이언트 환경에서의 호환성 테스트"
          },
          {
            "id": 4,
            "title": "리소스 풀링 및 연결 관리 최적화",
            "description": "데이터베이스 커넥션 풀, 스레드 풀 등 시스템 리소스를 효율적으로 관리하여 동시 처리 능력을 향상시킵니다.",
            "dependencies": [
              3
            ],
            "details": "- HikariCP 커넥션 풀 튜닝 (maximumPoolSize, connectionTimeout)\n- ThreadPoolTaskExecutor 설정 최적화\n- @Async 메소드를 위한 비동기 처리 풀 구성\n- RestTemplate/WebClient 커넥션 풀 설정\n- Redis 커넥션 풀 최적화 (Lettuce 설정)\n- 리소스 사용률 모니터링 대시보드 구축\n- Circuit Breaker 패턴 적용 (Resilience4j)",
            "status": "done",
            "testStrategy": "- 동시 접속자 100명 이상 부하 테스트\n- 커넥션 풀 고갈 시나리오 테스트\n- 리소스 리크 감지 테스트"
          },
          {
            "id": 5,
            "title": "JVM 튜닝 및 메모리 관리 최적화",
            "description": "JVM 파라미터를 조정하고 메모리 사용을 최적화하여 애플리케이션의 안정성과 성능을 향상시킵니다.",
            "dependencies": [
              4
            ],
            "details": "- G1GC 가비지 컬렉터 설정 및 튜닝\n- 힙 메모리 크기 최적화 (-Xms, -Xmx)\n- 메타스페이스 크기 설정\n- JVM 플래그 최적화 (-XX:+UseStringDeduplication)\n- 메모리 프로파일링 도구 설정 (JProfiler/VisualVM)\n- 메모리 누수 감지 및 해결\n- JMX를 통한 실시간 모니터링 구축",
            "status": "done",
            "testStrategy": "- 장시간 부하 테스트 (메모리 누수 검증)\n- GC 로그 분석 및 튜닝 효과 측정\n- 메모리 사용 패턴 분석"
          }
        ]
      },
      {
        "id": 18,
        "title": "Phase 5: 안정화 및 배포 - 보안 감사",
        "description": "BIF 사용자의 민감한 데이터를 보호하기 위한 포괄적인 보안 감사를 수행하고 취약점을 해결합니다.",
        "details": "- OWASP Top 10 취약점 점검\n- API 보안 강화\n- 데이터 암호화 검증\n- 접근 권한 감사\n- SQL 인젝션 방지 검증\n- XSS 방지 대책 확인\n- 보안 헤더 설정",
        "testStrategy": "- 침투 테스트\n- 보안 스캐닝 도구 실행\n- 권한 우회 시도 테스트\n- 암호화 강도 검증",
        "status": "in-progress",
        "dependencies": [
          17
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Phase 5: 안정화 및 배포 - 사용자 교육 자료 제작 지원",
        "description": "BIF 사용자와 보호자를 위한 교육 자료 제작을 지원하는 백엔드 시스템을 구축합니다.",
        "details": "- 튜토리얼 콘텐츠 관리 API\n- 사용자 레벨별 가이드 제공\n- 동영상 자막 데이터 관리\n- 진도 추적 시스템\n- FAQ 자동 응답 시스템\n- 쉬운 언어 변환 엔진\n- 교육 완료 인증 시스템",
        "testStrategy": "- 콘텐츠 로딩 속도 테스트\n- 진도 추적 정확성 검증\n- 다국어 지원 테스트\n- 접근성 기능 테스트",
        "status": "pending",
        "dependencies": [
          16
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Phase 5: 안정화 및 배포 - 정식 서비스 런칭",
        "description": "AWS 인프라에 서비스를 배포하고, 모니터링 시스템을 구축하여 안정적인 서비스 운영을 시작합니다.",
        "details": "- AWS EC2/RDS/S3 인프라 구성\n- Docker 컨테이너화\n- CI/CD 파이프라인 구축 (GitHub Actions)\n- CloudWatch 모니터링 설정\n- 자동 스케일링 구성\n- 백업 및 복구 전략\n- 운영 문서 작성",
        "testStrategy": "- 배포 프로세스 검증\n- 롤백 시나리오 테스트\n- 모니터링 알림 테스트\n- 장애 복구 시뮬레이션",
        "status": "pending",
        "dependencies": [
          17,
          18,
          19
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "currentTag": "default",
      "tags": {
        "default": {
          "name": "default",
          "description": "BIF-AI 백엔드 개발 태스크",
          "createdAt": "2025-01-16T05:00:00Z"
        }
      },
      "created": "2025-07-16T14:19:03.836Z",
      "description": "Tasks for master context",
      "updated": "2025-08-20T07:27:07.915Z"
    }
  }
}