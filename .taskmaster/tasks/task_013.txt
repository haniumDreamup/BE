# Task ID: 13
# Title: Implement User Registration and Profile Management
# Status: pending
# Dependencies: 11, 12
# Priority: high
# Description: Create registration flow optimized for BIF users with simplified interface
# Details:
Implement registration endpoint with minimal required fields, create user profile with cognitive level settings (IQ range 70-85), add guardian linkage during registration, implement password recovery with SMS/email options, store user preferences for notification methods

# Test Strategy:
Test registration with various cognitive profiles, validate guardian-user relationships, test password recovery flow, verify data encryption for sensitive fields

# Subtasks:
## 1. Design and Implement User Registration DTO and Validation [pending]
### Dependencies: None
### Description: Create registration request/response DTOs with simplified fields optimized for BIF users, implementing comprehensive validation rules
### Details:
Create RegisterRequest DTO with minimal fields (username, password, phoneNumber, cognitiveLevel, guardianContact). Implement custom validators for password strength appropriate for cognitive level (simple patterns allowed), phone number format validation, and cognitive level range validation (70-85). Create RegisterResponse DTO with user profile data and JWT token. Use @Valid annotations and create custom constraint validators. Ensure all validation messages use simple, positive language at 5th-grade reading level.

## 2. Implement User Registration Service with Cognitive Profile Support [pending]
### Dependencies: 13.1
### Description: Create service layer for user registration handling cognitive level settings and secure password storage
### Details:
Implement UserRegistrationService with methods for creating users with cognitive profiles. Hash passwords using BCrypt with appropriate strength factor. Generate unique user IDs and handle duplicate username/phone checks. Create UserProfile entity with cognitiveLevel field (IQ range 70-85) and associated preferences. Implement transaction management for atomicity. Store initial user preferences with default notification methods (SMS preferred over email). Create audit trail for registration events.

## 3. Create Guardian Linkage System During Registration [pending]
### Dependencies: 13.2
### Description: Implement guardian relationship management allowing users to register with guardian support
### Details:
Create Guardian entity and repository with relationship mapping to User. Implement GuardianService for managing guardian-user relationships with verification workflow. Add optional guardian fields to registration (guardianName, guardianPhone, relationship, verificationCode). Create guardian invitation system with SMS/email verification codes. Implement guardian consent tracking and relationship validation. Store guardian permissions for accessing user data. Create API for guardian to approve/reject linkage requests.

## 4. Implement Password Recovery with Multi-Channel Support [pending]
### Dependencies: 13.2
### Description: Create accessible password recovery system supporting both SMS and email channels
### Details:
Implement PasswordRecoveryService with SMS and email recovery options. Create recovery token generation with 6-digit numeric codes (easier for BIF users than complex strings). Implement rate limiting to prevent abuse (max 3 attempts per hour). Store recovery tokens in Redis with 15-minute expiration. Create simplified recovery flow with step-by-step visual guides. Implement SMS integration using AWS SNS or Twilio. Add email templates with simple language and clear instructions. Create recovery completion notification to user and guardian.

## 5. Build User Registration and Profile Management REST APIs [pending]
### Dependencies: 13.1, 13.2, 13.3, 13.4
### Description: Create REST endpoints for registration, profile management, and password recovery with proper authentication
### Details:
Implement POST /api/v1/auth/register endpoint accepting RegisterRequest DTO. Create GET/PUT /api/v1/users/profile endpoints for profile management with JWT authentication. Implement POST /api/v1/auth/recovery/initiate and POST /api/v1/auth/recovery/complete endpoints. Add guardian linkage endpoints: POST /api/v1/guardian/link and POST /api/v1/guardian/verify. Implement proper error handling with user-friendly messages. Add request/response logging with sensitive data masking. Ensure all responses follow standardized ApiResponse format. Implement rate limiting on registration endpoint.

