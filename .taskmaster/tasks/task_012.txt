# Task ID: 12
# Title: Design and Implement Core Database Schema
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create comprehensive database schema for users, guardians, devices, and activity tracking
# Details:
Design tables for users (with cognitive profile fields), guardians (with relationship types), devices (wearable camera metadata), locations (GPS tracking), activities (daily routine patterns), medications (schedule and adherence), emergency_contacts, notifications. Implement proper indexes for performance, add audit columns (created_at, updated_at)

# Test Strategy:
Validate schema with Flyway migrations, test foreign key constraints, verify index performance with explain plans, test data integrity rules

# Subtasks:
## 1. Design Core User and Guardian Entity Schema [pending]
### Dependencies: None
### Description: Create the foundational database tables for users and guardians with cognitive profile fields and relationship management
### Details:
Create users table with fields: id, username, email, password_hash, phone_number, full_name, date_of_birth, cognitive_level, language_preference, emergency_mode_enabled, profile_image_url, last_activity_at, is_active, created_at, updated_at. Create guardians table with fields: id, user_id, guardian_user_id, relationship_type (enum: parent, sibling, caregiver, doctor), is_primary, can_modify_settings, can_view_location, can_receive_alerts, approval_status, approved_at, created_at, updated_at. Add unique constraints on email/phone for users, composite unique on user_id + guardian_user_id

## 2. Implement Device and Location Tracking Schema [pending]
### Dependencies: 12.1
### Description: Design tables for wearable device management and GPS location tracking with proper indexing for performance
### Details:
Create devices table: id, user_id, device_type, device_model, serial_number, firmware_version, battery_level, last_sync_at, is_active, pairing_code, paired_at, created_at, updated_at. Create locations table: id, user_id, device_id, latitude, longitude, accuracy, altitude, speed, heading, location_type, address, captured_at, created_at. Add indexes: (user_id, last_sync_at) on devices, (user_id, captured_at DESC) on locations for efficient queries, spatial index on (latitude, longitude)

## 3. Create Activity and Medication Management Schema [pending]
### Dependencies: 12.1
### Description: Implement tables for tracking daily activities, routines, medications, and adherence with proper temporal indexing
### Details:
Create activities table: id, user_id, activity_type, activity_name, description, start_time, end_time, location_id, confidence_score, is_routine, created_at, updated_at. Create medications table: id, user_id, medication_name, dosage, frequency, time_of_day, instructions, prescriber, start_date, end_date, is_active, created_at, updated_at. Create medication_adherence table: id, medication_id, scheduled_time, taken_time, status (enum: taken, missed, delayed), reminder_sent, notes, created_at. Add indexes on temporal fields for efficient range queries

## 4. Design Notification and Emergency Contact Schema [pending]
### Dependencies: 12.1, 12.2
### Description: Create comprehensive notification system tables and emergency contact management with delivery tracking
### Details:
Create emergency_contacts table: id, user_id, contact_name, phone_number, relationship, priority_order, is_active, created_at, updated_at. Create notifications table: id, user_id, type (enum: reminder, alert, emergency, system), title, message, priority, scheduled_for, expires_at, metadata (JSON), created_at. Create notification_deliveries table: id, notification_id, channel (enum: push, sms, email), recipient, status (enum: pending, sent, delivered, failed), sent_at, delivered_at, failure_reason, created_at. Add indexes for notification queries by user and status

## 5. Implement Audit and Performance Optimization [pending]
### Dependencies: 12.1, 12.2, 12.3, 12.4
### Description: Add comprehensive audit columns, create database indexes for all foreign keys and common query patterns, implement Flyway migration scripts
### Details:
Add audit columns to all tables: created_by, updated_by (user IDs), deleted_at (soft delete), version (optimistic locking). Create composite indexes for common queries: (user_id, created_at) on all user-related tables, (user_id, is_active) where applicable. Create Flyway migration scripts: V1__initial_schema.sql with all table definitions, V2__performance_indexes.sql with optimization indexes. Add database triggers for updated_at auto-update. Configure table partitioning for locations and activities by created_at for historical data management

