# Task ID: 33
# Title: Create Multi-language Support System
# Status: pending
# Dependencies: 24
# Priority: low
# Description: Implement internationalization for Korean and English languages
# Details:
Set up Spring i18n configuration, create message bundles for Korean (primary) and English, implement language detection based on user preference, develop simplified translation for BIF users, ensure consistent terminology across languages

# Test Strategy:
Test language switching functionality, verify translation accuracy and simplicity, test fallback language behavior, validate special character handling

# Subtasks:
## 1. Configure Spring Boot I18n Infrastructure [pending]
### Dependencies: None
### Description: Set up Spring Boot internationalization configuration with message source, locale resolver, and interceptor for language detection
### Details:
Create I18nConfig class with @Configuration annotation. Configure MessageSource bean with ReloadableResourceBundleMessageSource pointing to classpath:messages. Set up LocaleResolver bean using SessionLocaleResolver with Korean as default locale. Configure LocaleChangeInterceptor to detect language parameter from requests. Add WebMvcConfigurer to register the interceptor. Configure UTF-8 encoding for message files.

## 2. Create Message Properties Files Structure [pending]
### Dependencies: 33.1
### Description: Develop message bundle files for Korean (primary) and English languages with simplified terminology for BIF users
### Details:
Create messages_ko.properties as primary file with all Korean translations using simple vocabulary suitable for 5th-grade reading level. Create messages_en.properties for English translations. Structure messages hierarchically (error.*, success.*, validation.*, ui.*). Include common UI elements, error messages, validation messages, and success notifications. Ensure all messages follow BIF guidelines for simple, positive language.

## 3. Implement Language Service and Utils [pending]
### Dependencies: 33.1, 33.2
### Description: Create service layer for handling language operations including user preference management and message retrieval
### Details:
Create LanguageService class with methods to get/set user language preference stored in UserPreference entity. Implement MessageUtils utility class wrapping MessageSource for easy message retrieval. Add methods to detect browser language from Accept-Language header. Create LanguageContext holder for thread-local locale storage. Implement fallback logic (Korean -> English -> key itself).

## 4. Add Language API Endpoints [pending]
### Dependencies: 33.3
### Description: Develop REST endpoints for language switching and retrieving available languages
### Details:
Create LanguageController with @RestController annotation. Implement GET /api/languages to return supported languages (ko, en) with display names. Add PUT /api/user/language to update user's language preference. Implement GET /api/translations/{key} for dynamic message retrieval. Add @ApiOperation annotations for Swagger documentation. Apply authentication where needed.

## 5. Integrate I18n with Response Messages [pending]
### Dependencies: 33.3, 33.4
### Description: Update all API responses and exception handlers to use internationalized messages
### Details:
Update ApiResponse class to include locale-specific messages. Modify GlobalExceptionHandler to use MessageUtils for error messages. Update all service classes to use message keys instead of hardcoded strings. Ensure AuthController, HealthController use i18n messages. Create aspect or filter to automatically set response messages based on user's locale. Update validation messages in DTOs to use message keys.

