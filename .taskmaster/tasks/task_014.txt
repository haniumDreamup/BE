# Task ID: 14
# Title: Create Guardian Dashboard API
# Status: pending
# Dependencies: 13
# Priority: high
# Description: Develop comprehensive API for guardian monitoring and management features
# Details:
Implement endpoints for guardian registration/login, create APIs for viewing linked BIF users, develop real-time location tracking endpoints, add activity summary endpoints (daily/weekly reports), implement emergency notification subscription APIs

# Test Strategy:
Test guardian access permissions, verify real-time data updates, test notification delivery, validate data privacy between different guardians

# Subtasks:
## 1. Implement Guardian Authentication and Registration API [pending]
### Dependencies: None
### Description: Create secure authentication endpoints for guardians including registration, login, JWT token generation, and password reset functionality
### Details:
Create GuardianAuthController with endpoints: POST /api/guardians/register (validate guardian relationship proof), POST /api/guardians/login (JWT authentication), POST /api/guardians/refresh-token, POST /api/guardians/reset-password. Implement GuardianService with BCrypt password hashing, JWT token generation with guardian-specific claims, and relationship verification logic. Create Guardian entity with fields: id, email, password, name, phoneNumber, relationshipType, verificationStatus. Add GuardianRepository extending JpaRepository. Implement custom @GuardianAuth annotation for securing guardian-specific endpoints

## 2. Create Guardian-User Relationship Management API [pending]
### Dependencies: 14.1
### Description: Develop endpoints for managing relationships between guardians and BIF users, including linking, unlinking, and viewing linked users with proper authorization
### Details:
Create GuardianRelationshipController with endpoints: GET /api/guardians/linked-users (paginated list of linked BIF users), POST /api/guardians/link-user (with verification code from BIF user), DELETE /api/guardians/unlink-user/{userId}, GET /api/guardians/pending-requests. Implement relationship verification using time-limited codes sent to BIF users. Create GuardianUserRelationship entity with fields: guardianId, userId, relationshipType, linkedDate, permissions (view-only, emergency-contact, full-access). Add relationship status tracking and audit logging for all relationship changes

## 3. Implement Real-time Location Tracking API [pending]
### Dependencies: 14.2
### Description: Build WebSocket-based real-time location tracking endpoints for guardians to monitor their linked BIF users' locations with privacy controls
### Details:
Create LocationWebSocketController using Spring WebSocket with STOMP protocol. Implement endpoints: WebSocket /ws/location/subscribe/{userId} for real-time updates, GET /api/guardians/users/{userId}/location/current, GET /api/guardians/users/{userId}/location/history (with date range). Create LocationUpdateService to handle location broadcasts only to authorized guardians. Implement privacy controls: location sharing permissions per user, time-based restrictions, accuracy level settings. Add Redis pub/sub for scalable real-time updates across multiple server instances

## 4. Develop Activity Summary and Reports API [pending]
### Dependencies: 14.2, 14.3
### Description: Create comprehensive activity reporting endpoints for guardians to view daily, weekly, and monthly summaries of their linked users' activities
### Details:
Create ActivityReportController with endpoints: GET /api/guardians/users/{userId}/activities/summary (with period parameter: daily/weekly/monthly), GET /api/guardians/users/{userId}/activities/detailed (paginated activity logs), GET /api/guardians/reports/export (PDF/CSV export). Implement ActivityAggregationService to compile: medication adherence rates, location patterns, emergency events, health metrics trends, app usage statistics. Create scheduled jobs for pre-calculating summaries. Add caching layer for frequently accessed reports. Include simplified visual representations suitable for guardians

## 5. Implement Emergency Notification Subscription System [pending]
### Dependencies: 14.2, 14.3
### Description: Build real-time emergency notification system allowing guardians to subscribe to alerts and configure notification preferences for their linked users
### Details:
Create EmergencyNotificationController with endpoints: POST /api/guardians/notifications/subscribe (with notification preferences), GET /api/guardians/notifications/preferences, PUT /api/guardians/notifications/preferences, GET /api/guardians/notifications/history. Implement multi-channel notification delivery: push notifications (FCM), SMS (Twilio), email, in-app notifications. Create NotificationPreference entity with customizable alert types: emergency SOS, medication missed, unusual location, health metric anomaly. Add real-time notification using WebSocket for instant alerts. Implement notification batching and priority queuing for reliable delivery

