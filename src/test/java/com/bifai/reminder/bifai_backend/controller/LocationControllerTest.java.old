package com.bifai.reminder.bifai_backend.controller;

import com.bifai.reminder.bifai_backend.dto.location.*;
import com.bifai.reminder.bifai_backend.entity.Geofence.GeofenceType;
import com.bifai.reminder.bifai_backend.entity.Location.LocationType;
import com.bifai.reminder.bifai_backend.service.LocationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.hamcrest.Matchers.hasSize;

/**
 * 위치 관리 컨트롤러 테스트
 * 
 * <p>LocationController의 모든 엔드포인트를 테스트합니다.
 * 위치 업데이트, 안전 구역 관리, 위치 이력 조회 등을 검증합니다.</p>
 */
@DisplayName("LocationController 테스트")
class LocationControllerTest extends BaseControllerTest {

  @MockitoBean
  private LocationService locationService;
  
  @MockitoBean
  private com.bifai.reminder.bifai_backend.security.jwt.JwtTokenProvider jwtTokenProvider;

  private LocationUpdateRequest validUpdateRequest;
  private LocationResponse mockLocationResponse;
  private GeofenceRequest validGeofenceRequest;
  private GeofenceResponse mockGeofenceResponse;

  @BeforeEach
  void setUp() {
    // 위치 업데이트 요청 설정
    validUpdateRequest = LocationUpdateRequest.builder()
        .latitude(37.5665)
        .longitude(126.9780)
        .altitude(50.0)
        .accuracy(10.0)
        .speed(5.0)
        .heading(180.0)
        .address("서울특별시 중구 태평로1가")
        .locationType(LocationType.REAL_TIME)
        .deviceId("device-001")
        .batteryLevel(85)
        .isCharging(false)
        .networkType("LTE")
        .provider("GPS")
        .activityType(null)  // ActivityType enum이 정의되지 않았으므로 null로 설정
        .activityConfidence(90)
        .build();

    // 위치 응답 설정
    mockLocationResponse = LocationResponse.builder()
        .id(1L)
        .userId(1L)
        .latitude(37.5665)
        .longitude(126.9780)
        .altitude(50.0)
        .accuracy(10.0)
        .speed(5.0)
        .heading(180.0)
        .address("서울특별시 중구 태평로1가")
        .locationType(LocationType.REAL_TIME)
        .locationTypeDescription("실시간")
        .isInSafeZone(true)
        .currentGeofenceId(1L)
        .currentGeofenceName("집")
        .deviceId("device-001")
        .batteryLevel(85)
        .isCharging(false)
        .createdAt(LocalDateTime.now())
        .build();

    // 안전 구역 요청 설정
    validGeofenceRequest = GeofenceRequest.builder()
        .name("집")
        .description("우리 집")
        .centerLatitude(37.5665)
        .centerLongitude(126.9780)
        .radiusMeters(100)
        .address("서울특별시 중구 태평로1가")
        .type(GeofenceType.HOME)
        .isActive(true)
        .alertOnEntry(true)
        .alertOnExit(true)
        .activeDays("1111111")
        .priority(1)
        .build();

    // 안전 구역 응답 설정
    mockGeofenceResponse = GeofenceResponse.builder()
        .id(1L)
        .userId(1L)
        .name("집")
        .description("우리 집")
        .centerLatitude(37.5665)
        .centerLongitude(126.9780)
        .radiusMeters(100)
        .address("서울특별시 중구 태평로1가")
        .type(GeofenceType.HOME)
        .typeDescription("집")
        .isActive(true)
        .alertOnEntry(true)
        .alertOnExit(true)
        .activeDays("1111111")
        .priority(1)
        .createdAt(LocalDateTime.now())
        .build();
  }

  @Test
  @DisplayName("위치 업데이트 - 성공")
  @WithMockUser(roles = "USER")
  void updateLocation_Success() throws Exception {
    // given
    given(locationService.updateLocation(any(LocationUpdateRequest.class)))
        .willReturn(mockLocationResponse);

    // when & then
    mockMvc.perform(post("/api/v1/location/update")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(validUpdateRequest)))
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.success").value(true))
        .andExpect(jsonPath("$.message").value("위치가 업데이트되었습니다"))
        .andExpect(jsonPath("$.data.latitude").value(37.5665))
        .andExpect(jsonPath("$.data.longitude").value(126.9780))
        .andExpect(jsonPath("$.data.isInSafeZone").value(true));

    verify(locationService).updateLocation(any(LocationUpdateRequest.class));
  }

  @Test
  @DisplayName("위치 업데이트 - 디바이스 권한으로 성공")
  @WithMockUser(roles = "DEVICE")
  void updateLocation_AsDevice_Success() throws Exception {
    // given
    given(locationService.updateLocation(any(LocationUpdateRequest.class)))
        .willReturn(mockLocationResponse);

    // when & then
    mockMvc.perform(post("/api/v1/location/update")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(validUpdateRequest)))
        .andExpect(status().isOk());
  }

  @Test
  @DisplayName("위치 업데이트 - 인증 없음 실패")
  void updateLocation_Unauthorized() throws Exception {
    mockMvc.perform(post("/api/v1/location/update")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(validUpdateRequest)))
        .andExpect(status().isUnauthorized());
  }

  @Test
  @DisplayName("현재 위치 조회 - 본인 조회 성공")
  @WithMockUser(roles = "USER")
  void getCurrentLocation_OwnLocation_Success() throws Exception {
    // given
    Long userId = 1L;
    given(locationService.getCurrentLocation(userId))
        .willReturn(mockLocationResponse);
    given(locationService.isOwnLocation(userId))
        .willReturn(true);

    // when & then
    mockMvc.perform(get("/api/v1/location/current/{userId}", userId))
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.success").value(true))
        .andExpect(jsonPath("$.message").value("현재 위치를 가져왔습니다"))
        .andExpect(jsonPath("$.data.userId").value(userId));
  }

  @Test
  @DisplayName("현재 위치 조회 - 보호자 조회 성공")
  @WithMockUser(roles = "GUARDIAN")
  void getCurrentLocation_AsGuardian_Success() throws Exception {
    // given
    Long userId = 2L;
    given(locationService.getCurrentLocation(userId))
        .willReturn(mockLocationResponse);
    given(locationService.isOwnLocation(userId))
        .willReturn(false);
    given(locationService.isGuardianOfUser(userId))
        .willReturn(true);

    // when & then
    mockMvc.perform(get("/api/v1/location/current/{userId}", userId))
        .andExpect(status().isOk());
  }

  @Test
  @DisplayName("현재 위치 조회 - 권한 없음")
  @WithMockUser(roles = "USER")
  void getCurrentLocation_Forbidden() throws Exception {
    // given
    Long userId = 999L;
    given(locationService.isOwnLocation(userId)).willReturn(false);
    given(locationService.isGuardianOfUser(userId)).willReturn(false);

    // when & then
    mockMvc.perform(get("/api/v1/location/current/{userId}", userId))
        .andExpect(status().isForbidden());
  }

  @Test
  @DisplayName("안전 구역 설정 - 성공")
  @WithMockUser(roles = "USER")
  void createGeofence_Success() throws Exception {
    // given
    given(locationService.createGeofence(any(GeofenceRequest.class)))
        .willReturn(mockGeofenceResponse);

    // when & then
    mockMvc.perform(post("/api/v1/location/geofence")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(validGeofenceRequest)))
        .andExpect(status().isCreated())
        .andExpect(jsonPath("$.success").value(true))
        .andExpect(jsonPath("$.message").value("안전 구역이 설정되었습니다"))
        .andExpect(jsonPath("$.data.name").value("집"))
        .andExpect(jsonPath("$.data.radiusMeters").value(100));
  }

  @Test
  @DisplayName("안전 구역 설정 - 중복된 위치")
  @WithMockUser(roles = "USER")
  void createGeofence_DuplicateLocation() throws Exception {
    // given
    given(locationService.createGeofence(any(GeofenceRequest.class)))
        .willThrow(new IllegalArgumentException("이미 유사한 위치에 안전 구역이 설정되어 있습니다"));

    // when & then
    mockMvc.perform(post("/api/v1/location/geofence")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(validGeofenceRequest)))
        .andExpect(status().isBadRequest())
        .andExpect(jsonPath("$.success").value(false))
        .andExpect(jsonPath("$.error.message").value("이미 유사한 위치에 안전 구역이 설정되어 있습니다"));
  }

  @Test
  @DisplayName("사용자의 안전 구역 목록 조회 - 성공")
  @WithMockUser(roles = "USER")
  void getUserGeofences_Success() throws Exception {
    // given
    Long userId = 1L;
    List<GeofenceResponse> geofences = Arrays.asList(mockGeofenceResponse);
    given(locationService.getUserGeofences(userId))
        .willReturn(geofences);
    given(locationService.isOwnLocation(userId))
        .willReturn(true);

    // when & then
    mockMvc.perform(get("/api/v1/location/geofence/{userId}", userId))
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.success").value(true))
        .andExpect(jsonPath("$.data", hasSize(1)))
        .andExpect(jsonPath("$.data[0].name").value("집"));
  }

  @Test
  @DisplayName("위치 이력 조회 - 성공")
  @WithMockUser(roles = "USER")
  void getLocationHistory_Success() throws Exception {
    // given
    Long userId = 1L;
    PageRequest pageable = PageRequest.of(0, 50);
    Page<LocationResponse> historyPage = new PageImpl<>(
        Arrays.asList(mockLocationResponse), 
        pageable, 
        1
    );
    
    given(locationService.getLocationHistory(eq(userId), any()))
        .willReturn(historyPage);
    given(locationService.isOwnLocation(userId))
        .willReturn(true);

    // when & then
    mockMvc.perform(get("/api/v1/location/history/{userId}", userId)
            .param("page", "0")
            .param("size", "50"))
        .andExpect(status().isOk())
        .andExpect(jsonPath("$.success").value(true))
        .andExpect(jsonPath("$.data.content", hasSize(1)))
        .andExpect(jsonPath("$.data.totalElements").value(1));
  }

  @Test
  @DisplayName("위치 이력 조회 - 관리자 권한")
  @WithMockUser(roles = "ADMIN")
  void getLocationHistory_AsAdmin_Success() throws Exception {
    // given
    Long userId = 999L;
    PageRequest pageable = PageRequest.of(0, 50);
    Page<LocationResponse> historyPage = new PageImpl<>(
        Arrays.asList(mockLocationResponse), 
        pageable, 
        1
    );
    
    given(locationService.getLocationHistory(eq(userId), any()))
        .willReturn(historyPage);

    // when & then
    mockMvc.perform(get("/api/v1/location/history/{userId}", userId))
        .andExpect(status().isOk());
  }
}