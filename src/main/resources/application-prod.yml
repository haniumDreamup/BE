spring:
  # Database Configuration
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:bifai_db}?useSSL=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ${DB_USER:bifai_user}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      pool-name: BifHikariCP-Prod

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: none  # Flyway가 스키마 관리
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 5
          max-wait: -1ms
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 3600000  # 1 hour
      cache-null-values: false
      
  # Security OAuth2
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${OAUTH2_KAKAO_CLIENT_ID}
            client-secret: ${OAUTH2_KAKAO_CLIENT_SECRET}
            scope:
              - profile_nickname
              - profile_image
              - account_email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-authentication-method: client_secret_post
          naver:
            client-id: ${OAUTH2_NAVER_CLIENT_ID}
            client-secret: ${OAUTH2_NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
              - profile_image
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
            
  # Flyway Configuration (복구 후 재활성화)
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 1
    validate-on-migrate: false  # 일시적으로 비활성화
    clean-disabled: true
    repair: true

  # Batch Configuration
  batch:
    job:
      enabled: false  # 필요시에만 활성화
    jdbc:
      initialize-schema: never
      
  # AI Configuration
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      model: gpt-4
      temperature: 0.3
      max-tokens: 500
      
# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-message: never  # Production에서는 상세 에러 숨김
    include-stacktrace: never
  forward-headers-strategy: native  # 프록시 뒤에서 실행시
    
# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET}
    access-token-expiration-ms: ${JWT_ACCESS_TOKEN_EXPIRATION:900000}
    refresh-token-expiration-ms: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000}
  cors:
    allowed-origins: 
      - https://bifai.co.kr
      - https://www.bifai.co.kr
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600
  file:
    storage-type: ${FILE_STORAGE_TYPE:local}
    storage-path: ${FILE_STORAGE_PATH:/var/bifai/files}
    max-size: 10485760  # 10MB
    allowed-extensions: jpg,jpeg,png,gif,pdf,mp4,avi
    
# Logging Configuration
logging:
  level:
    root: INFO
    com.bifai.reminder: INFO
    org.springframework.web: WARN
    org.hibernate: WARN
  file:
    name: /var/log/bifai/application.log
    max-size: 10MB
    max-history: 30
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    
# Actuator Configuration (모니터링)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
        
# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 100
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 10
  ratelimiter:
    configs:
      default:
        limitForPeriod: 100
        limitRefreshPeriod: 1s
        timeoutDuration: 0
        
# AWS Configuration (if using S3)
aws:
  s3:
    access-key: ${AWS_ACCESS_KEY_ID:}
    secret-key: ${AWS_SECRET_ACCESS_KEY:}
    region: ${AWS_REGION:ap-northeast-2}
    bucket-name: ${S3_BUCKET_NAME:bifai-files}
    
# Firebase Configuration
firebase:
  config-path: ${FIREBASE_CONFIG_PATH:}
  enabled: false  # FCM 사용시 true로 변경
  
# Google Cloud Configuration  
google:
  cloud:
    credentials: ${GOOGLE_APPLICATION_CREDENTIALS:}
    vision:
      enabled: false  # Vision API 사용시 true로 변경