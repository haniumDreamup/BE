spring:
  # Auto Configuration Exclusions
  autoconfigure:
    exclude:
      - org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      # OpenAI AutoConfiguration 활성화 (GPT-4o Vision 사용)

  # Multipart File Upload Configuration (스마트폰 사진 지원)
  servlet:
    multipart:
      max-file-size: 10MB      # 단일 파일 최대 크기
      max-request-size: 10MB   # 전체 요청 최대 크기
      enabled: true

  # Database Configuration (새 RDS: bifai-db-prod)
  datasource:
    url: jdbc:mysql://${DB_HOST:bifai-db-prod.cncwewgskk3u.ap-northeast-2.rds.amazonaws.com}:${DB_PORT:3306}/${DB_NAME:bifai_db}?useSSL=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ${DB_USER:admin}
    password: ${DB_PASSWORD:BifaiDB2025!}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 60000       # 60초로 증가 (RDS 초기 연결 고려)
      validation-timeout: 5000        # 연결 검증 타임아웃
      idle-timeout: 600000            # 10분
      max-lifetime: 1800000           # 30분
      connection-test-query: SELECT 1 # 연결 유효성 검사
      leak-detection-threshold: 60000 # 연결 누수 감지
      pool-name: BifHikariCP-Prod

  # JPA Configuration (프로덕션 최적화)
  jpa:
    hibernate:
      ddl-auto: validate  # Flyway로 마이그레이션 후 JPA 모델 검증
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        enable_lazy_load_no_trans: false
    open-in-view: false
        
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 5
          max-wait: -1ms
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 3600000  # 1 hour
      cache-null-values: false
      
  # Security OAuth2
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${OAUTH2_KAKAO_CLIENT_ID}
            client-secret: ${OAUTH2_KAKAO_CLIENT_SECRET}
            scope:
              - profile_nickname
              - profile_image
              - account_email
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-authentication-method: client_secret_post
          naver:
            client-id: ${OAUTH2_NAVER_CLIENT_ID}
            client-secret: ${OAUTH2_NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
              - profile_image
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
            
  # Flyway Configuration (Best Practices 2025)
  flyway:
    enabled: true  # 프로덕션 마이그레이션 자동 실행
    baseline-on-migrate: true  # 기존 DB에 Flyway 적용 시 baseline 생성
    validate-on-migrate: false  # 임시로 비활성화 (V2 실패 이력 때문)
    out-of-order: false  # 순서 어긋난 마이그레이션 허용 안 함
    locations: classpath:db/migration
    # 프로덕션 안전 설정
    clean-disabled: true  # clean 명령 비활성화 (데이터 손실 방지)
    mixed: false  # SQL과 Java 마이그레이션 혼용 안 함

  # Batch Configuration
  batch:
    job:
      enabled: false  # 필요시에만 활성화
    jdbc:
      initialize-schema: never
      
  # AI Configuration
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      base-url: https://api.openai.com
      chat:
        enabled: true
        options:
          model: gpt-4o-mini  # GPT-4o-mini: 2배 빠름, 10배 저렴
          temperature: 0.3  # BIF 친화적 일관성
          max-tokens: 1000  # Vision 분석 결과가 길 수 있음
      # HTTP 클라이언트 타임아웃 설정
      client:
        connect-timeout: 30000  # 연결 타임아웃: 30초
        read-timeout: 90000     # 읽기 타임아웃: 90초 (Vision 분석 대기)
      
# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-message: never  # Production에서는 상세 에러 숨김
    include-stacktrace: never
  forward-headers-strategy: native  # 프록시 뒤에서 실행시
  # Tomcat 타임아웃 설정 (GPT-4o Vision 응답 대기)
  tomcat:
    connection-timeout: 120000  # 2분 (기본 20초 → 120초)
    keep-alive-timeout: 120000
    max-keep-alive-requests: 100
    
# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET}
    access-token-expiration-ms: ${JWT_ACCESS_TOKEN_EXPIRATION:900000}
    refresh-token-expiration-ms: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000}
  cors:
    allowed-origins:
      - https://bifai.co.kr
      - https://www.bifai.co.kr
      - http://localhost:8081
      - http://127.0.0.1:8081
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600
  file:
    storage-type: ${FILE_STORAGE_TYPE:local}
    storage-path: ${FILE_STORAGE_PATH:/var/bifai/files}
    max-size: 10485760  # 10MB
    allowed-extensions: jpg,jpeg,png,gif,pdf,mp4,avi
    
# Logging Configuration
logging:
  level:
    root: INFO
    com.bifai.reminder: INFO
    org.springframework.web: WARN
    org.hibernate: DEBUG
    org.hibernate.tool.schema: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  file:
    name: /var/log/bifai/application.log
    max-size: 10MB
    max-history: 30
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    
# Actuator Configuration (모니터링)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,flyway  # Flyway 모니터링 추가
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    enable:
      process: false
      system: false
      jvm: true
    export:
      prometheus:
        enabled: true
        
# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 100
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 10
  ratelimiter:
    configs:
      default:
        limitForPeriod: 100
        limitRefreshPeriod: 1s
        timeoutDuration: 0
        
# AWS Configuration (if using S3)
aws:
  s3:
    access-key: ${AWS_ACCESS_KEY_ID:}
    secret-key: ${AWS_SECRET_ACCESS_KEY:}
    region: ${AWS_REGION:ap-northeast-2}
    bucket-name: ${S3_BUCKET_NAME:bifai-files}
    
# Firebase Configuration
firebase:
  config-path: ${FIREBASE_CONFIG_PATH:}
  enabled: false  # FCM 사용시 true로 변경
  
# Google Cloud Configuration
google:
  cloud:
    credentials:
      path: /app/vision-service-account.json  # Vision 전용
    project-id: bif-ai-vision  # Vision 프로젝트
    vision:
      enabled: true  # Vision API 활성화
      confidence-threshold: 0.6  # 60% 이상 객체 감지
      high-confidence-threshold: 0.85  # 85% 이상은 확실함으로 표시
      max-results: 15  # 최대 15개 객체 반환
