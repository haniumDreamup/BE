spring:
  application:
    name: bifai-backend
  profiles:
    active: dev

# 설정은 아래 app 섹션에 통합
  
  # DevTools 비활성화 - JPA 엔티티 스캔 문제 해결
  devtools:
    restart:
      enabled: false
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        enable_lazy_load_no_trans: false
        default_batch_fetch_size: 10
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
    show-sql: false
    open-in-view: false
  
  # Datasource Configuration (will be overridden by profiles)
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      # 커넥션 풀 기본 설정
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 600000        # 10분
      connection-timeout: 30000   # 30초
      max-lifetime: 1800000       # 30분
      
      # 성능 최적화 설정
      pool-name: BifHikariCP
      register-mbeans: true
      leak-detection-threshold: 60000  # 1분
      validation-timeout: 5000         # 5초
      initialization-fail-timeout: 60000  # 1분
      
      # 데이터베이스별 최적화 설정은 DatabaseConfig에서 처리
  
  # Redis Configuration - 선택적 사용
  # data:
  #   redis:
  #     host: localhost
  #     port: 6379
  #     timeout: 2000
  #     lettuce:
  #       pool:
  #         max-active: 8
  #         max-idle: 8
  #         min-idle: 0
  
  # Security Configuration
  security:
    user:
      name: ${SECURITY_USER_NAME:admin}
      password: ${SECURITY_USER_PASSWORD:changeme}
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - profile
              - email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  
  # Flyway Configuration
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 1
    validate-on-migrate: true
    clean-disabled: true
    out-of-order: false
    placeholder-replacement: true
  
  # Bean definition overriding
  main:
    allow-bean-definition-overriding: true
  
  # Spring AI Configuration  
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:}
      chat:
        options:
          model: ${OPENAI_MODEL:gpt-4o-mini}
          temperature: ${OPENAI_TEMPERATURE:0.7}
          max-tokens: ${OPENAI_MAX_TOKENS:500}

# Server Configuration
server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always

# Logging Configuration
logging:
  level:
    root: INFO
    com.bifai.reminder: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/bifai-backend.log
    max-size: 10MB
    max-history: 30

# Application Configuration
app:
  name: BIF-AI Reminder Backend
  version: 0.0.1
  description: 경계선 지능 대상자를 위한 상황 인지 보조 시스템
  
  # CORS 설정
  cors:
    allowed-origins: http://localhost:3000,http://localhost:8080

  # OAuth2 리다이렉트 설정
  oauth2:
    redirect-uri: ${OAUTH2_REDIRECT_URI:http://localhost:3004/auth/callback}
    # 콤마로 구분된 리스트 (Spring @Value가 자동으로 List로 변환)
    allowed-redirect-uris: http://localhost:3000/auth/callback,http://localhost:3001/auth/callback,http://localhost:3002/auth/callback,http://localhost:3003/auth/callback,http://localhost:3004/auth/callback,http://localhost:3005/auth/callback,http://localhost:3006/auth/callback,http://localhost:8000/auth/callback,http://localhost:8001/auth/callback,capacitor://localhost/auth/callback

  # 보안 설정
  security:
    jwt-expiration: 86400000 # 24시간
    refresh-token-expiration: 604800000 # 7일
    rate-limit:
      requests-per-second: 50
      burst-capacity: 100
  
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET:YmlmYWlSZW1pbmRlclNlY3JldEtleUZvckpXVFRva2VuR2VuZXJhdGlvbjIwMjRCb3JkZXJsaW5lSW50ZWxsaWdlbmNlRnVuY3Rpb25pbmdSZW1pbmRlclNlcnZpY2U=}
    access-token-expiration-ms: ${JWT_ACCESS_TOKEN_EXPIRATION:900000}    # 15분 (15 * 60 * 1000)
    refresh-token-expiration-ms: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000} # 7일 (7 * 24 * 60 * 60 * 1000)

# Custom OpenAI settings for our application
openai:
  api:
    timeout: ${OPENAI_TIMEOUT:30000}
    daily-token-limit: ${OPENAI_DAILY_TOKEN_LIMIT:100000}
    rate-limit-per-minute: ${OPENAI_RATE_LIMIT:20}

# Google Cloud Vision API settings
google:
  cloud:
    vision:
      enabled: ${GOOGLE_VISION_ENABLED:false}
      max-results: ${GOOGLE_VISION_MAX_RESULTS:10}
      confidence-threshold: ${GOOGLE_VISION_CONFIDENCE:0.5}
    credentials:
      path: ${GOOGLE_CLOUD_CREDENTIALS_PATH:}
    project-id: ${GOOGLE_CLOUD_PROJECT_ID:}

# AWS S3 Configuration
aws:
  s3:
    region: ${AWS_REGION:ap-northeast-2}
    bucket-name: ${S3_BUCKET_NAME:bifai-media}
    access-key: ${AWS_ACCESS_KEY:}
    secret-key: ${AWS_SECRET_KEY:}
    endpoint: ${AWS_S3_ENDPOINT:}  # LocalStack or custom endpoint
  cloudfront:
    url: ${CLOUDFRONT_URL:}  # CDN URL if using CloudFront

# Firebase Cloud Messaging Configuration  
fcm:
  project-id: ${FCM_PROJECT_ID:bifai-reminder}
  credentials-path: ${FCM_CREDENTIALS_PATH:firebase-service-account.json}
  enabled: ${FCM_ENABLED:false}  # 나중에 true로 변경

# BIF 서비스 전용 데이터베이스 설정
bif:
  database:
    # 커넥션 풀 상세 설정
    connection-pool:
      maximum-pool-size: ${BIF_DB_MAX_POOL_SIZE:10}
      minimum-idle: ${BIF_DB_MIN_IDLE:5}
      idle-timeout: ${BIF_DB_IDLE_TIMEOUT:600000}
      connection-timeout: ${BIF_DB_CONNECTION_TIMEOUT:30000}
      max-lifetime: ${BIF_DB_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${BIF_DB_LEAK_THRESHOLD:60000}
      validation-timeout: ${BIF_DB_VALIDATION_TIMEOUT:5000}
      initialization-fail-timeout: ${BIF_DB_INIT_FAIL_TIMEOUT:60000}
    
    # 쿼리 최적화 설정
    query-optimization:
      batch-size: 25
      fetch-size: 100
      query-timeout: 30
      slow-query-threshold: 1000
      query-plan-cache-size: 2048
      prepared-statement-cache-size: 250
    
    # 모니터링 설정
    monitoring:
      enable-statistics: ${BIF_DB_ENABLE_STATS:false}
      log-slow-queries: true
      log-connection-state: true
      metrics-collection-interval: 60
      enable-jmx: true
    
    # 보안 설정
    security:
      use-ssl: ${BIF_DB_USE_SSL:false}
      verify-ssl-certificate: true
      encrypt-connection: false
      enable-sql-injection-prevention: true
      mask-sensitive-data: true

# Springdoc OpenAPI (Swagger) 설정
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    # API 그룹별 정렬
    tags-sorter: alpha
    operations-sorter: alpha
    # Try it out 기능 활성화
    try-it-out-enabled: true
    # 기본 확장 표시
    doc-expansion: none
    # 깊이 제한
    default-models-expand-depth: 1
    default-model-expand-depth: 1
    # 응답 예시 표시
    display-request-duration: true
    # OAuth2 리다이렉트 URL
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
  # API 그룹 설정
  group-configs:
    - group: public
      paths-to-match: 
        - /api/v1/auth/**
        - /api/v1/health/**
      display-name: "공개 API"
    - group: user
      paths-to-match: 
        - /api/v1/users/**
        - /api/v1/guardians/**
      display-name: "사용자 API"
    - group: service
      paths-to-match: 
        - /api/v1/schedules/**
        - /api/v1/notifications/**
        - /api/v1/locations/**
        - /api/v1/medications/**
      display-name: "서비스 API"