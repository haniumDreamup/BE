package com.bifai.reminder.bifai_backend.controller;

import com.bifai.reminder.bifai_backend.common.BaseController;
import com.bifai.reminder.bifai_backend.dto.ApiResponse;
import com.bifai.reminder.bifai_backend.dto.location.*;
import com.bifai.reminder.bifai_backend.service.LocationService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * 위치 관리 컨트롤러
 * 
 * <p>BIF 사용자의 실시간 위치 추적 및 안전 구역 관리를 담당합니다.
 * GPS 위치 업데이트, 안전 구역 설정, 위치 이력 조회 등의 기능을 제공합니다.</p>
 * 
 * @author BIF-AI 개발팀
 * @version 1.0
 * @since 2024-01-01
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/location")
@RequiredArgsConstructor
public class LocationController extends BaseController {

  private final LocationService locationService;

  /**
   * 위치 업데이트
   * 
   * <p>BIF 사용자 또는 디바이스의 현재 위치를 업데이트합니다.
   * 안전 구역 이탈 여부를 자동으로 확인하고 필요시 알림을 발송합니다.</p>
   * 
   * @param request 위치 정보 (위도, 경도, 배터리 상태 등)
   * @return 업데이트된 위치 정보
   */
  @PostMapping("/update")
  @PreAuthorize("hasRole('USER') or hasRole('DEVICE')")
  public ResponseEntity<ApiResponse<LocationResponse>> updateLocation(
      @Valid @RequestBody LocationUpdateRequest request) {
    log.debug("위치 업데이트 요청: lat={}, lng={}", request.getLatitude(), request.getLongitude());
    
    try {
      LocationResponse response = locationService.updateLocation(request);
      return createSuccessResponse(response, "위치가 업데이트되었습니다");
    } catch (Exception e) {
      return handleException("위치 업데이트 실패", e, "위치 업데이트 중 오류가 발생했습니다");
    }
  }

  /**
   * 현재 위치 조회
   * 
   * <p>특정 사용자의 가장 최근 위치 정보를 조회합니다.
   * 본인, 보호자, 관리자만 조회 가능합니다.</p>
   * 
   * @param userId 사용자 ID
   * @return 현재 위치 정보
   */
  @GetMapping("/current/{userId}")
  @PreAuthorize("@locationService.isOwnLocation(#userId) or " +
                "@locationService.isGuardianOfUser(#userId) or " +
                "hasRole('ADMIN')")
  public ResponseEntity<ApiResponse<LocationResponse>> getCurrentLocation(
      @PathVariable Long userId) {
    log.info("현재 위치 조회: userId={}", userId);
    
    try {
      LocationResponse response = locationService.getCurrentLocation(userId);
      return createSuccessResponse(response, "현재 위치를 가져왔습니다");
    } catch (Exception e) {
      return handleNotFoundException("위치 조회 실패: userId=" + userId, e, 
          "위치 정보를 찾을 수 없습니다");
    }
  }

  /**
   * 안전 구역 설정
   * 
   * <p>새로운 안전 구역(Geofence)을 생성합니다.
   * 집, 학교, 병원 등 BIF 사용자가 자주 방문하는 장소를 안전 구역으로 설정할 수 있습니다.</p>
   * 
   * @param request 안전 구역 정보 (이름, 중심 좌표, 반경 등)
   * @return 생성된 안전 구역 정보
   */
  @PostMapping("/geofence")
  @PreAuthorize("hasRole('USER') or hasRole('GUARDIAN')")
  public ResponseEntity<ApiResponse<GeofenceResponse>> createGeofence(
      @Valid @RequestBody GeofenceRequest request) {
    log.info("안전 구역 설정 요청: name={}", request.getName());
    
    try {
      GeofenceResponse response = locationService.createGeofence(request);
      return createCreatedResponse(response, "안전 구역이 설정되었습니다");
    } catch (IllegalArgumentException e) {
      log.warn("안전 구역 설정 실패: {}", e.getMessage());
      return createBadRequestResponse(e.getMessage());
    } catch (Exception e) {
      return handleException("안전 구역 설정 중 오류", e, 
          "안전 구역 설정 중 오류가 발생했습니다");
    }
  }

  /**
   * 사용자의 안전 구역 목록 조회
   * 
   * <p>특정 사용자에게 설정된 모든 안전 구역을 조회합니다.
   * 우선순위에 따라 정렬되어 반환됩니다.</p>
   * 
   * @param userId 사용자 ID
   * @return 안전 구역 목록
   */
  @GetMapping("/geofence/{userId}")
  @PreAuthorize("@locationService.isOwnLocation(#userId) or " +
                "@locationService.isGuardianOfUser(#userId) or " +
                "hasRole('ADMIN')")
  public ResponseEntity<ApiResponse<List<GeofenceResponse>>> getUserGeofences(
      @PathVariable Long userId) {
    log.info("안전 구역 목록 조회: userId={}", userId);
    
    try {
      List<GeofenceResponse> geofences = locationService.getUserGeofences(userId);
      return createSuccessResponse(geofences, "안전 구역 목록을 가져왔습니다");
    } catch (Exception e) {
      return handleException("안전 구역 조회 실패: userId=" + userId, e, 
          "안전 구역 조회 중 오류가 발생했습니다");
    }
  }

  /**
   * 위치 이력 조회
   * 
   * <p>특정 사용자의 과거 위치 이동 기록을 페이지 단위로 조회합니다.
   * 최신 위치부터 오래된 순으로 정렬되어 반환됩니다.</p>
   * 
   * @param userId 사용자 ID
   * @param pageable 페이지 정보 (기본값: size=50)
   * @return 위치 이력 페이지
   */
  @GetMapping("/history/{userId}")
  @PreAuthorize("@locationService.isOwnLocation(#userId) or " +
                "@locationService.isGuardianOfUser(#userId) or " +
                "hasRole('ADMIN')")
  public ResponseEntity<ApiResponse<Page<LocationResponse>>> getLocationHistory(
      @PathVariable Long userId,
      @PageableDefault(size = 50) Pageable pageable) {
    log.info("위치 이력 조회: userId={}", userId);
    
    try {
      Page<LocationResponse> history = locationService.getLocationHistory(userId, pageable);
      return createSuccessResponse(history, "위치 이력을 가져왔습니다");
    } catch (Exception e) {
      return handleException("위치 이력 조회 실패: userId=" + userId, e, 
          "위치 이력 조회 중 오류가 발생했습니다");
    }
  }
}